-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vsi_control is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    va : IN STD_LOGIC_VECTOR (11 downto 0);
    vb : IN STD_LOGIC_VECTOR (11 downto 0);
    vc : IN STD_LOGIC_VECTOR (11 downto 0);
    phA : IN STD_LOGIC_VECTOR (31 downto 0);
    phB : IN STD_LOGIC_VECTOR (31 downto 0);
    phC : IN STD_LOGIC_VECTOR (31 downto 0);
    da : OUT STD_LOGIC_VECTOR (8 downto 0);
    db : OUT STD_LOGIC_VECTOR (8 downto 0);
    dc : OUT STD_LOGIC_VECTOR (8 downto 0);
    driverEna : OUT STD_LOGIC_VECTOR (0 downto 0);
    PWMthrdHarmEna : OUT STD_LOGIC_VECTOR (0 downto 0);
    Vma8b : OUT STD_LOGIC_VECTOR (7 downto 0);
    ma8b : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of vsi_control is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vsi_control,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.915750,HLS_SYN_LAT=60,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=4355,HLS_SYN_LUT=6629}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_C0200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000001000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3AA00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111010101000000000000000000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rstIntN : STD_LOGIC_VECTOR (0 downto 0);
    signal ctrlByp : STD_LOGIC_VECTOR (0 downto 0);
    signal params_vRef : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kp : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kd : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_max : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min : STD_LOGIC_VECTOR (31 downto 0);
    signal outEna : STD_LOGIC_VECTOR (0 downto 0);
    signal thrdHarmEna : STD_LOGIC_VECTOR (0 downto 0);
    signal da_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal da_1_vld_reg : STD_LOGIC := '0';
    signal da_1_vld_in : STD_LOGIC;
    signal da_1_ack_in : STD_LOGIC;
    signal db_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal db_1_vld_reg : STD_LOGIC := '0';
    signal db_1_vld_in : STD_LOGIC;
    signal db_1_ack_in : STD_LOGIC;
    signal dc_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal dc_1_vld_reg : STD_LOGIC := '0';
    signal dc_1_vld_in : STD_LOGIC;
    signal dc_1_ack_in : STD_LOGIC;
    signal Vma8b_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal Vma8b_1_vld_reg : STD_LOGIC := '0';
    signal Vma8b_1_vld_in : STD_LOGIC;
    signal Vma8b_1_ack_in : STD_LOGIC;
    signal ma8b_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ma8b_1_vld_reg : STD_LOGIC := '0';
    signal ma8b_1_vld_in : STD_LOGIC;
    signal ma8b_1_ack_in : STD_LOGIC;
    signal e : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_integral : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sat : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_i_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i4_reg_1478 : STD_LOGIC_VECTOR (31 downto 0);
    signal thrdHarmEna_read_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal outEna_read_reg_1488 : STD_LOGIC_VECTOR (0 downto 0);
    signal params_y_min_read_reg_1493 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_max_read_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kd_read_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2_read_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kp_read_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_vRef_read_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrlByp_read_reg_1531 : STD_LOGIC_VECTOR (0 downto 0);
    signal rstIntN_read_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal e1_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_rstIntN_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_rstIntN_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_load_s_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_load_s_reg_1572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1577 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1582 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_1596 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_25_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_26_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1617 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_new_1_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_new_1_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_40_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_16_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_46_reg_1646 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ma_1_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal loc_V_1_fu_819_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1659 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal sh_assign_fu_827_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_1664 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_1669 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i_i_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_i_i_i_reg_1675 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_915_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal loc_V_3_fu_937_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_1685 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_2_fu_945_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_reg_1690 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_1_reg_1695 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i_i1_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_i_i_i1_reg_1701 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_5_fu_987_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_5_reg_1711 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_4_fu_995_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_reg_1716 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_2_reg_1721 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_i_i_fu_1009_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_i_i_i_reg_1727 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_1732 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_7_fu_1037_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_7_reg_1737 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_6_fu_1045_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_reg_1742 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_3_reg_1747 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_i_i1_fu_1059_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_i_i_i1_reg_1753 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_1758 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_9_fu_1087_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_9_reg_1763 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_8_fu_1095_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_8_reg_1768 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_4_reg_1773 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_i_i2_fu_1109_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_i_i_i2_reg_1779 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_fu_1183_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_56_fu_1259_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_reg_1789 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_1334_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_reg_1795 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_fu_1409_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_reg_1801 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_1421_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_61_fu_1433_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_1445_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_integral_flag_2_phi_fu_291_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_flag_2_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal y_integral_new_2_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_block_state72 : BOOLEAN;
    signal storemerge1_fu_667_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal PWMthrdHarmEna_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal driverEna_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_344_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_to_int_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_455_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_465_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_to_int_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min_to_int_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_517_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_527_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_544_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal params_y_max_to_int_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_587_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_597_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_cast_fu_663_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_to_int_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_685_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_695_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_to_int_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_737_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_747_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_809_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_823_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_34_i_i_i_fu_847_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_i_i_i_cast_fu_860_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_863_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_873_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_34_i_i_i_cast1_fu_856_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_36_i_i_i_fu_877_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_37_i_i_i_fu_881_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_64_fu_893_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_i_i_fu_887_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_48_fu_901_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_905_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_927_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast_fu_941_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_8_fu_965_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_4_fu_977_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i2_cast_fu_991_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_1015_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_6_fu_1027_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i3_cast_fu_1041_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_1065_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_8_fu_1077_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i4_cast8_fu_1091_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_34_i_i_i1_fu_1115_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_i_i_i1_cast_fu_1128_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_1131_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_1141_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_34_i_i_i1_cast1_fu_1124_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_36_i_i_i1_fu_1145_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_37_i_i_i1_fu_1149_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_72_fu_1161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_i_i1_fu_1155_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_51_fu_1169_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_1173_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_i_i_i_fu_1191_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_43_i_i_i_cast_fu_1204_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_fu_1207_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_cast_fu_1213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_1217_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_42_i_i_i_cast1_fu_1200_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_44_i_i_i_fu_1221_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_45_i_i_i_fu_1225_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_76_fu_1237_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_i_i_fu_1231_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_54_fu_1245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_1249_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_i_i_i1_fu_1266_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_43_i_i_i1_cast_fu_1279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_fu_1282_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_cast_fu_1288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_7_cast_cas_fu_1292_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_42_i_i_i1_cast1_fu_1275_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_44_i_i_i1_fu_1296_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_45_i_i_i1_fu_1300_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_fu_1312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_i_i1_fu_1306_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_57_fu_1320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_fu_1324_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_i_i_i2_fu_1341_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_43_i_i_i2_cast_fu_1354_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_fu_1357_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_cast_fu_1363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_9_cast_cas_fu_1367_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_42_i_i_i2_cast9_fu_1350_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_44_i_i_i2_fu_1371_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_45_i_i_i2_fu_1375_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_84_fu_1387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_i_i2_fu_1381_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_62_fu_1395_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_1399_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_1416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_1428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_66_fu_1440_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_309_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_347_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);

    component vsi_control_faddfbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vsi_control_fadd_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vsi_control_fmul_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vsi_control_sitofeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vsi_control_fcmp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vsi_control_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rstIntN : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctrlByp : OUT STD_LOGIC_VECTOR (0 downto 0);
        params_vRef : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Kp : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Ki2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Kd : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_max : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_min : OUT STD_LOGIC_VECTOR (31 downto 0);
        outEna : OUT STD_LOGIC_VECTOR (0 downto 0);
        thrdHarmEna : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    vsi_control_AXILiteS_s_axi_U : component vsi_control_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rstIntN => rstIntN,
        ctrlByp => ctrlByp,
        params_vRef => params_vRef,
        params_Kp => params_Kp,
        params_Ki2 => params_Ki2,
        params_Kd => params_Kd,
        params_y_max => params_y_max,
        params_y_min => params_y_min,
        outEna => outEna,
        thrdHarmEna => thrdHarmEna);

    vsi_control_faddfbkb_U0 : component vsi_control_faddfbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        opcode => grp_fu_309_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    vsi_control_fadd_cud_U1 : component vsi_control_fadd_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_367,
        din1 => ap_const_lv32_C0200000,
        ce => ap_const_logic_1,
        dout => grp_fu_314_p2);

    vsi_control_fmul_dEe_U2 : component vsi_control_fmul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    vsi_control_fmul_dEe_U3 : component vsi_control_fmul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    vsi_control_fmul_dEe_U4 : component vsi_control_fmul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ma_1_fu_795_p3,
        din1 => phB,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    vsi_control_fmul_dEe_U5 : component vsi_control_fmul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ma_1_fu_795_p3,
        din1 => phC,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    vsi_control_sitofeOg_U6 : component vsi_control_sitofeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p1);

    vsi_control_sitofeOg_U7 : component vsi_control_sitofeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_344_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p1);

    vsi_control_fcmp_fYi_U8 : component vsi_control_fcmp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        opcode => grp_fu_347_opcode,
        dout => grp_fu_347_p2);

    vsi_control_fcmp_fYi_U9 : component vsi_control_fcmp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_389,
        din1 => params_y_max_read_reg_1501,
        opcode => ap_const_lv5_2,
        dout => tmp_34_fu_352_p2);





    PWMthrdHarmEna_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                PWMthrdHarmEna_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    PWMthrdHarmEna_preg <= thrdHarmEna_read_reg_1483;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    driverEna_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                driverEna_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    driverEna_preg <= outEna_read_reg_1488;
                end if; 
            end if;
        end if;
    end process;


    Vma8b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    da_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    db_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dc_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ma8b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    y_integral_flag_2_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1582 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = or_cond4_reg_1596))) then 
                y_integral_flag_2_reg_287 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and ((or_cond_reg_1582 = ap_const_lv1_1) or (or_cond4_fu_508_p2 = ap_const_lv1_1)))) then 
                y_integral_flag_2_reg_287 <= not_rstIntN_reg_1567;
            end if; 
        end if;
    end process;

    y_integral_new_2_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1582 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = or_cond4_reg_1596))) then 
                y_integral_new_2_reg_298 <= y_integral_new_1_reg_1628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and ((or_cond_reg_1582 = ap_const_lv1_1) or (or_cond4_fu_508_p2 = ap_const_lv1_1)))) then 
                y_integral_new_2_reg_298 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Vma8b_1_vld_in) and (ap_const_logic_0 = Vma8b_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Vma8b_1_vld_in) and (ap_const_logic_1 = Vma8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                Vma8b_1_data_reg <= p_Val2_3_fu_915_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                ctrlByp_read_reg_1531 <= ctrlByp;
                outEna_read_reg_1488 <= outEna;
                params_Kd_read_reg_1510 <= params_Kd;
                params_Ki2_read_reg_1515 <= params_Ki2;
                params_Kp_read_reg_1520 <= params_Kp;
                params_vRef_read_reg_1525 <= params_vRef;
                params_y_max_read_reg_1501 <= params_y_max;
                params_y_min_read_reg_1493 <= params_y_min;
                rstIntN_read_reg_1536 <= rstIntN;
                thrdHarmEna_read_reg_1483 <= thrdHarmEna;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = da_1_vld_in) and (ap_const_logic_0 = da_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = da_1_vld_in) and (ap_const_logic_1 = da_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                da_1_data_reg <= tmp_53_fu_1421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = db_1_vld_in) and (ap_const_logic_0 = db_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = db_1_vld_in) and (ap_const_logic_1 = db_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                db_1_data_reg <= tmp_61_fu_1433_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dc_1_vld_in) and (ap_const_logic_0 = dc_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dc_1_vld_in) and (ap_const_logic_1 = dc_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                dc_1_data_reg <= tmp_67_fu_1445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                e <= reg_389;
                e1_reg_1562 <= e;
                not_rstIntN_reg_1567 <= not_rstIntN_fu_427_p2;
                or_cond_reg_1582 <= or_cond_fu_492_p2;
                tmp_11_reg_1577 <= tmp_11_fu_481_p2;
                y_integral_load_s_reg_1572 <= y_integral_load_s_fu_432_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                isNeg_1_reg_1695 <= sh_assign_2_fu_945_p2(8 downto 8);
                isNeg_2_reg_1721 <= sh_assign_4_fu_995_p2(8 downto 8);
                isNeg_3_reg_1747 <= sh_assign_6_fu_1045_p2(8 downto 8);
                isNeg_4_reg_1773 <= sh_assign_8_fu_1095_p2(8 downto 8);
                loc_V_3_reg_1685 <= loc_V_3_fu_937_p1;
                loc_V_5_reg_1711 <= loc_V_5_fu_987_p1;
                loc_V_7_reg_1737 <= loc_V_7_fu_1037_p1;
                loc_V_9_reg_1763 <= loc_V_9_fu_1087_p1;
                p_Result_1_reg_1732 <= p_Val2_10_fu_1015_p1(31 downto 31);
                p_Result_2_reg_1758 <= p_Val2_12_fu_1065_p1(31 downto 31);
                p_Result_s_reg_1706 <= p_Val2_8_fu_965_p1(31 downto 31);
                sh_assign_2_reg_1690 <= sh_assign_2_fu_945_p2;
                sh_assign_4_reg_1716 <= sh_assign_4_fu_995_p2;
                sh_assign_6_reg_1742 <= sh_assign_6_fu_1045_p2;
                sh_assign_8_reg_1768 <= sh_assign_8_fu_1095_p2;
                tmp_35_i_i_i1_reg_1701 <= tmp_35_i_i_i1_fu_959_p2;
                tmp_43_i_i_i1_reg_1753 <= tmp_43_i_i_i1_fu_1059_p2;
                tmp_43_i_i_i2_reg_1779 <= tmp_43_i_i_i2_fu_1109_p2;
                tmp_43_i_i_i_reg_1727 <= tmp_43_i_i_i_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                isNeg_reg_1669 <= sh_assign_fu_827_p2(8 downto 8);
                loc_V_1_reg_1659 <= loc_V_1_fu_819_p1;
                sh_assign_reg_1664 <= sh_assign_fu_827_p2;
                tmp_35_i_i_i_reg_1675 <= tmp_35_i_i_i_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ma8b_1_vld_in) and (ap_const_logic_0 = ma8b_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ma8b_1_vld_in) and (ap_const_logic_1 = ma8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                ma8b_1_data_reg <= p_Val2_7_fu_1183_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (or_cond_reg_1582 = ap_const_lv1_0))) then
                or_cond4_reg_1596 <= or_cond4_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_356 <= grp_fu_341_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_361 <= grp_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_367 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_376 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_383 <= grp_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state61))) then
                reg_389 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                sat <= storemerge1_fu_667_p3;
                y_integral_new_1_reg_1628 <= y_integral_new_1_fu_656_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_12_reg_1542 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_16_reg_1639 <= tmp_16_fu_727_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (or_cond_fu_492_p2 = ap_const_lv1_0))) then
                tmp_19_reg_1591 <= grp_fu_347_p2;
                tmp_1_reg_1586 <= tmp_1_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                tmp_25_reg_1600 <= tmp_25_fu_560_p2;
                tmp_26_reg_1606 <= tmp_26_fu_578_p2;
                tmp_28_reg_1612 <= grp_fu_347_p2;
                tmp_32_reg_1617 <= tmp_32_fu_613_p2;
                tmp_34_reg_1623 <= tmp_34_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                tmp_40_reg_1634 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                tmp_46_reg_1646 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_53_i4_reg_1478 <= grp_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                tmp_56_reg_1789 <= tmp_56_fu_1259_p3;
                tmp_59_reg_1795 <= tmp_59_fu_1334_p3;
                tmp_65_reg_1801 <= tmp_65_fu_1409_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_i2_reg_1468 <= grp_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1582 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = or_cond4_reg_1596))) then
                y <= tmp_18_fu_779_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = Vma8b_1_ack_in) or (ap_const_logic_0 = ma8b_1_ack_in))) and (y_integral_flag_2_phi_fu_291_p4 = ap_const_lv1_1))) then
                y_integral <= y_integral_new_2_reg_298;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, da_1_ack_in, db_1_ack_in, dc_1_ack_in, Vma8b_1_ack_in, ma8b_1_ack_in, or_cond_reg_1582, or_cond4_fu_508_p2, ap_CS_fsm_state41, ap_CS_fsm_state72)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and ((or_cond_reg_1582 = ap_const_lv1_1) or (or_cond4_fu_508_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = Vma8b_1_ack_in) or (ap_const_logic_0 = ma8b_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    PWMthrdHarmEna_assign_proc : process(thrdHarmEna_read_reg_1483, ap_CS_fsm_state65, PWMthrdHarmEna_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            PWMthrdHarmEna <= thrdHarmEna_read_reg_1483;
        else 
            PWMthrdHarmEna <= PWMthrdHarmEna_preg;
        end if; 
    end process;

    Vma8b <= Vma8b_1_data_reg;

    Vma8b_1_ack_in_assign_proc : process(Vma8b_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vma8b_1_vld_reg) or ((ap_const_logic_1 = Vma8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            Vma8b_1_ack_in <= ap_const_logic_1;
        else 
            Vma8b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vma8b_1_vld_in_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            Vma8b_1_vld_in <= ap_const_logic_1;
        else 
            Vma8b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);

    ap_block_state72_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, Vma8b_1_ack_in, ma8b_1_ack_in)
    begin
                ap_block_state72 <= ((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = Vma8b_1_ack_in) or (ap_const_logic_0 = ma8b_1_ack_in));
    end process;


    ap_done_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, Vma8b_1_ack_in, ma8b_1_ack_in, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = Vma8b_1_ack_in) or (ap_const_logic_0 = ma8b_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, Vma8b_1_ack_in, ma8b_1_ack_in, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = Vma8b_1_ack_in) or (ap_const_logic_0 = ma8b_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    da <= da_1_data_reg;

    da_1_ack_in_assign_proc : process(da_1_vld_reg)
    begin
        if (((ap_const_logic_0 = da_1_vld_reg) or ((ap_const_logic_1 = da_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            da_1_ack_in <= ap_const_logic_1;
        else 
            da_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    da_1_vld_in_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            da_1_vld_in <= ap_const_logic_1;
        else 
            da_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    db <= db_1_data_reg;

    db_1_ack_in_assign_proc : process(db_1_vld_reg)
    begin
        if (((ap_const_logic_0 = db_1_vld_reg) or ((ap_const_logic_1 = db_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            db_1_ack_in <= ap_const_logic_1;
        else 
            db_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    db_1_vld_in_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            db_1_vld_in <= ap_const_logic_1;
        else 
            db_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dc <= dc_1_data_reg;

    dc_1_ack_in_assign_proc : process(dc_1_vld_reg)
    begin
        if (((ap_const_logic_0 = dc_1_vld_reg) or ((ap_const_logic_1 = dc_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            dc_1_ack_in <= ap_const_logic_1;
        else 
            dc_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    dc_1_vld_in_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            dc_1_vld_in <= ap_const_logic_1;
        else 
            dc_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    driverEna_assign_proc : process(outEna_read_reg_1488, ap_CS_fsm_state65, driverEna_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            driverEna <= outEna_read_reg_1488;
        else 
            driverEna <= driverEna_preg;
        end if; 
    end process;


    grp_fu_309_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state24, ap_CS_fsm_state45, ap_CS_fsm_state34, or_cond_reg_1582, or_cond4_fu_508_p2, ap_CS_fsm_state41, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (or_cond_reg_1582 = ap_const_lv1_0) and (ap_const_lv1_0 = or_cond4_fu_508_p2)))) then 
            grp_fu_309_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_fu_309_opcode <= ap_const_lv2_0;
        else 
            grp_fu_309_opcode <= "XX";
        end if; 
    end process;


    grp_fu_309_p0_assign_proc : process(params_vRef, ap_CS_fsm_state11, reg_361, reg_367, reg_376, ap_CS_fsm_state24, reg_389, ap_CS_fsm_state45, ap_CS_fsm_state34, y_integral_load_s_reg_1572, ap_CS_fsm_state41, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_309_p0 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_309_p0 <= y_integral_load_s_reg_1572;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_fu_309_p0 <= reg_389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_309_p0 <= params_vRef;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_309_p0 <= reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_309_p0 <= reg_361;
        else 
            grp_fu_309_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_309_p1_assign_proc : process(ap_CS_fsm_state11, reg_361, reg_367, reg_376, ap_CS_fsm_state24, ap_CS_fsm_state45, ap_CS_fsm_state34, e1_reg_1562, ap_CS_fsm_state41, y_integral_new_1_reg_1628, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_309_p1 <= y_integral_new_1_reg_1628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_309_p1 <= e1_reg_1562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_309_p1 <= reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_fu_309_p1 <= reg_361;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_309_p1 <= reg_367;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_309_p1 <= ap_const_lv32_C0200000;
        else 
            grp_fu_309_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_320_p0_assign_proc : process(reg_356, reg_376, ap_CS_fsm_state20, reg_383, reg_389, ap_CS_fsm_state41, ma_1_fu_795_p3, ap_CS_fsm_state66, ap_CS_fsm_state65, ap_CS_fsm_state16, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_320_p0 <= ma_1_fu_795_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_fu_320_p0 <= reg_389;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_320_p0 <= reg_383;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_320_p0 <= reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_320_p0 <= reg_356;
        else 
            grp_fu_320_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_320_p1_assign_proc : process(ap_CS_fsm_state20, reg_383, params_Kd_read_reg_1510, params_Ki2_read_reg_1515, ap_CS_fsm_state41, ap_CS_fsm_state66, ap_CS_fsm_state65, ap_CS_fsm_state16, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_fu_320_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_320_p1 <= params_Kd_read_reg_1510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_320_p1 <= params_Ki2_read_reg_1515;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_320_p1 <= reg_383;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_320_p1 <= ap_const_lv32_40C00000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_320_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_320_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p0_assign_proc : process(reg_367, ap_CS_fsm_state20, reg_389, tmp_i2_reg_1468, tmp_53_i4_reg_1478, ap_CS_fsm_state41, ma_1_fu_795_p3, ap_CS_fsm_state66, ap_CS_fsm_state16, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_325_p0 <= ma_1_fu_795_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_325_p0 <= reg_389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_325_p0 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_325_p0 <= tmp_53_i4_reg_1478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_325_p0 <= tmp_i2_reg_1468;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(phA, reg_367, ap_CS_fsm_state20, params_Kp_read_reg_1520, ap_CS_fsm_state41, ap_CS_fsm_state66, ap_CS_fsm_state16, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_325_p1 <= phA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_325_p1 <= params_Kp_read_reg_1520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_325_p1 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_325_p1 <= ap_const_lv32_40C00000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_325_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, tmp_i_fu_398_p1, tmp_i6_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_341_p0 <= tmp_i6_fu_408_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_341_p0 <= tmp_i_fu_398_p1;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_344_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vb),32));

    grp_fu_347_opcode_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state40, or_cond_fu_492_p2, ap_CS_fsm_state50, ap_CS_fsm_state62, ap_CS_fsm_state64)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (or_cond_fu_492_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            grp_fu_347_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            grp_fu_347_opcode <= ap_const_lv5_4;
        else 
            grp_fu_347_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_347_p0_assign_proc : process(reg_389, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state62, tmp_16_reg_1639, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_347_p0 <= tmp_16_reg_1639;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            grp_fu_347_p0 <= reg_389;
        else 
            grp_fu_347_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_p1_assign_proc : process(params_y_min_read_reg_1493, params_y_max_read_reg_1501, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state50, ap_CS_fsm_state62, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_347_p1 <= params_y_max_read_reg_1501;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            grp_fu_347_p1 <= params_y_min_read_reg_1493;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_347_p1 <= ap_const_lv32_0;
        else 
            grp_fu_347_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    loc_V_1_fu_819_p1 <= p_Val2_s_fu_805_p1(23 - 1 downto 0);
    loc_V_2_fu_927_p4 <= p_Val2_4_fu_923_p1(30 downto 23);
    loc_V_3_fu_937_p1 <= p_Val2_4_fu_923_p1(23 - 1 downto 0);
    loc_V_4_fu_977_p4 <= p_Val2_8_fu_965_p1(30 downto 23);
    loc_V_5_fu_987_p1 <= p_Val2_8_fu_965_p1(23 - 1 downto 0);
    loc_V_6_fu_1027_p4 <= p_Val2_10_fu_1015_p1(30 downto 23);
    loc_V_7_fu_1037_p1 <= p_Val2_10_fu_1015_p1(23 - 1 downto 0);
    loc_V_8_fu_1077_p4 <= p_Val2_12_fu_1065_p1(30 downto 23);
    loc_V_9_fu_1087_p1 <= p_Val2_12_fu_1065_p1(23 - 1 downto 0);
    loc_V_fu_809_p4 <= p_Val2_s_fu_805_p1(30 downto 23);
    ma8b <= ma8b_1_data_reg;

    ma8b_1_ack_in_assign_proc : process(ma8b_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ma8b_1_vld_reg) or ((ap_const_logic_1 = ma8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            ma8b_1_ack_in <= ap_const_logic_1;
        else 
            ma8b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ma8b_1_vld_in_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ma8b_1_vld_in <= ap_const_logic_1;
        else 
            ma8b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ma_1_fu_795_p3 <= 
        params_vRef_read_reg_1525 when (ctrlByp_read_reg_1531(0) = '1') else 
        y;
    not_rstIntN_fu_427_p2 <= (rstIntN_read_reg_1536 xor ap_const_lv1_1);
    notlhs2_fu_548_p2 <= "0" when (tmp_21_fu_517_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_566_p2 <= "0" when (tmp_23_fu_534_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_601_p2 <= "0" when (tmp_30_fu_587_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_699_p2 <= "0" when (tmp_36_fu_685_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_751_p2 <= "0" when (tmp_42_fu_737_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_469_p2 <= "0" when (tmp_fu_455_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_554_p2 <= "1" when (tmp_22_fu_527_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_572_p2 <= "1" when (tmp_24_fu_544_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_607_p2 <= "1" when (tmp_31_fu_597_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_705_p2 <= "1" when (tmp_37_fu_695_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_757_p2 <= "1" when (tmp_43_fu_747_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_475_p2 <= "1" when (tmp_9_fu_465_p1 = ap_const_lv23_0) else "0";
    or_cond4_fu_508_p2 <= (tmp_1_reg_1586 and tmp_20_fu_504_p2);
    or_cond_fu_492_p2 <= (tmp_2_fu_443_p3 and tmp_17_fu_487_p2);
    p_Val2_10_fu_1015_p1 <= grp_fu_333_p2;
    p_Val2_12_fu_1065_p1 <= grp_fu_337_p2;
    p_Val2_3_fu_915_p3 <= 
        tmp_48_fu_901_p1 when (isNeg_reg_1669(0) = '1') else 
        tmp_49_fu_905_p4;
    p_Val2_4_fu_923_p1 <= grp_fu_320_p2;
    p_Val2_7_fu_1183_p3 <= 
        tmp_51_fu_1169_p1 when (isNeg_1_reg_1695(0) = '1') else 
        tmp_52_fu_1173_p4;
    p_Val2_8_fu_965_p1 <= grp_fu_325_p2;
    p_Val2_s_fu_805_p1 <= grp_fu_320_p2;
    params_y_max_to_int_fu_584_p1 <= params_y_max_read_reg_1501;
    params_y_min_to_int_fu_531_p1 <= params_y_min_read_reg_1493;
    sel_tmp1_fu_643_p2 <= (tmp_35_fu_632_p2 and sel_tmp_fu_637_p2);
    sel_tmp2_fu_649_p3 <= 
        params_y_max_read_reg_1501 when (sel_tmp1_fu_643_p2(0) = '1') else 
        reg_389;
    sel_tmp6_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp1_fu_643_p2),2));
    sel_tmp_fu_637_p2 <= (tmp_29_fu_623_p2 xor ap_const_lv1_1);
        sh_assign_1_cast_cas_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_863_p3),25));

        sh_assign_1_cast_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_863_p3),32));

    sh_assign_1_fu_863_p3 <= 
        tmp_35_i_i_i_cast_fu_860_p1 when (isNeg_reg_1669(0) = '1') else 
        sh_assign_reg_1664;
    sh_assign_2_fu_945_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast_fu_941_p1));
        sh_assign_3_cast_cas_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_1131_p3),25));

        sh_assign_3_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_1131_p3),32));

    sh_assign_3_fu_1131_p3 <= 
        tmp_35_i_i_i1_cast_fu_1128_p1 when (isNeg_1_reg_1695(0) = '1') else 
        sh_assign_2_reg_1690;
    sh_assign_4_fu_995_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast_fu_991_p1));
        sh_assign_5_cast_cas_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_1207_p3),25));

        sh_assign_5_cast_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_1207_p3),32));

    sh_assign_5_fu_1207_p3 <= 
        tmp_43_i_i_i_cast_fu_1204_p1 when (isNeg_2_reg_1721(0) = '1') else 
        sh_assign_4_reg_1716;
    sh_assign_6_fu_1045_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i3_cast_fu_1041_p1));
        sh_assign_7_cast_cas_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1282_p3),25));

        sh_assign_7_cast_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1282_p3),32));

    sh_assign_7_fu_1282_p3 <= 
        tmp_43_i_i_i1_cast_fu_1279_p1 when (isNeg_3_reg_1747(0) = '1') else 
        sh_assign_6_reg_1742;
    sh_assign_8_fu_1095_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i4_cast8_fu_1091_p1));
        sh_assign_9_cast_cas_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_1357_p3),25));

        sh_assign_9_cast_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_1357_p3),32));

    sh_assign_9_fu_1357_p3 <= 
        tmp_43_i_i_i2_cast_fu_1354_p1 when (isNeg_4_reg_1773(0) = '1') else 
        sh_assign_8_reg_1768;
    sh_assign_fu_827_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_823_p1));
    storemerge1_fu_667_p3 <= 
        ap_const_lv2_3 when (tmp_29_fu_623_p2(0) = '1') else 
        sel_tmp6_cast_fu_663_p1;
    tmp_10_to_int_fu_513_p1 <= reg_389;
    tmp_11_fu_481_p2 <= (notrhs_fu_475_p2 or notlhs_fu_469_p2);
    tmp_16_fu_727_p3 <= 
        reg_389 when (tmp_41_fu_722_p2(0) = '1') else 
        params_y_min_read_reg_1493;
    tmp_16_to_int_fu_681_p1 <= reg_389;
    tmp_17_fu_487_p2 <= (tmp_11_fu_481_p2 and tmp_12_reg_1542);
    tmp_18_fu_779_p3 <= 
        tmp_16_reg_1639 when (tmp_47_fu_774_p2(0) = '1') else 
        params_y_max_read_reg_1501;
    tmp_18_to_int_fu_734_p1 <= tmp_16_reg_1639;
    tmp_1_fu_498_p2 <= "1" when (sat = ap_const_lv2_1) else "0";
    tmp_20_fu_504_p2 <= (tmp_11_reg_1577 and tmp_19_reg_1591);
    tmp_21_fu_517_p4 <= tmp_10_to_int_fu_513_p1(30 downto 23);
    tmp_22_fu_527_p1 <= tmp_10_to_int_fu_513_p1(23 - 1 downto 0);
    tmp_23_fu_534_p4 <= params_y_min_to_int_fu_531_p1(30 downto 23);
    tmp_24_fu_544_p1 <= params_y_min_to_int_fu_531_p1(23 - 1 downto 0);
    tmp_25_fu_560_p2 <= (notrhs2_fu_554_p2 or notlhs2_fu_548_p2);
    tmp_26_fu_578_p2 <= (notrhs3_fu_572_p2 or notlhs3_fu_566_p2);
    tmp_27_fu_619_p2 <= (tmp_25_reg_1600 and tmp_26_reg_1606);
    tmp_29_fu_623_p2 <= (tmp_27_fu_619_p2 and tmp_28_reg_1612);
    tmp_2_fu_443_p3 <= sat(1 downto 1);
    tmp_30_fu_587_p4 <= params_y_max_to_int_fu_584_p1(30 downto 23);
    tmp_31_fu_597_p1 <= params_y_max_to_int_fu_584_p1(23 - 1 downto 0);
    tmp_32_fu_613_p2 <= (notrhs5_fu_607_p2 or notlhs5_fu_601_p2);
    tmp_33_fu_628_p2 <= (tmp_25_reg_1600 and tmp_32_reg_1617);
    tmp_34_i_i_i1_cast1_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i_i_i1_fu_1115_p4),55));
    tmp_34_i_i_i1_fu_1115_p4 <= ((ap_const_lv1_1 & loc_V_3_reg_1685) & ap_const_lv1_0);
    tmp_34_i_i_i_cast1_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i_i_i_fu_847_p4),55));
    tmp_34_i_i_i_fu_847_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_1659) & ap_const_lv1_0);
    tmp_35_fu_632_p2 <= (tmp_33_fu_628_p2 and tmp_34_reg_1623);
        tmp_35_i_i_i1_cast_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_i_i_i1_reg_1701),9));

    tmp_35_i_i_i1_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_927_p4));
        tmp_35_i_i_i_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_i_i_i_reg_1675),9));

    tmp_35_i_i_i_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_809_p4));
    tmp_36_fu_685_p4 <= tmp_16_to_int_fu_681_p1(30 downto 23);
    tmp_36_i_i_i1_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1137_p1),55));
    tmp_36_i_i_i_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_869_p1),55));
    tmp_37_fu_695_p1 <= tmp_16_to_int_fu_681_p1(23 - 1 downto 0);
    tmp_37_i_i_i1_fu_1149_p2 <= std_logic_vector(shift_right(unsigned(tmp_34_i_i_i1_fu_1115_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_1141_p1(25-1 downto 0)))));
    tmp_37_i_i_i_fu_881_p2 <= std_logic_vector(shift_right(unsigned(tmp_34_i_i_i_fu_847_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_873_p1(25-1 downto 0)))));
    tmp_38_fu_711_p2 <= (notrhs6_fu_705_p2 or notlhs6_fu_699_p2);
    tmp_38_i_i_i1_fu_1155_p2 <= std_logic_vector(shift_left(unsigned(tmp_34_i_i_i1_cast1_fu_1124_p1),to_integer(unsigned('0' & tmp_36_i_i_i1_fu_1145_p1(31-1 downto 0)))));
    tmp_38_i_i_i_fu_887_p2 <= std_logic_vector(shift_left(unsigned(tmp_34_i_i_i_cast1_fu_856_p1),to_integer(unsigned('0' & tmp_36_i_i_i_fu_877_p1(31-1 downto 0)))));
    tmp_39_fu_717_p2 <= (tmp_38_fu_711_p2 and tmp_26_reg_1606);
    tmp_41_fu_722_p2 <= (tmp_39_fu_717_p2 and tmp_40_reg_1634);
    tmp_42_fu_737_p4 <= tmp_18_to_int_fu_734_p1(30 downto 23);
    tmp_42_i_i_i1_cast1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_i_i_i1_fu_1266_p4),63));
    tmp_42_i_i_i1_fu_1266_p4 <= ((ap_const_lv1_1 & loc_V_7_reg_1737) & ap_const_lv1_0);
    tmp_42_i_i_i2_cast9_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_i_i_i2_fu_1341_p4),63));
    tmp_42_i_i_i2_fu_1341_p4 <= ((ap_const_lv1_1 & loc_V_9_reg_1763) & ap_const_lv1_0);
    tmp_42_i_i_i_cast1_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_i_i_i_fu_1191_p4),63));
    tmp_42_i_i_i_fu_1191_p4 <= ((ap_const_lv1_1 & loc_V_5_reg_1711) & ap_const_lv1_0);
    tmp_43_fu_747_p1 <= tmp_18_to_int_fu_734_p1(23 - 1 downto 0);
        tmp_43_i_i_i1_cast_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_i_i_i1_reg_1753),9));

    tmp_43_i_i_i1_fu_1059_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_6_fu_1027_p4));
        tmp_43_i_i_i2_cast_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_i_i_i2_reg_1779),9));

    tmp_43_i_i_i2_fu_1109_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_8_fu_1077_p4));
        tmp_43_i_i_i_cast_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_i_i_i_reg_1727),9));

    tmp_43_i_i_i_fu_1009_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_4_fu_977_p4));
    tmp_44_fu_763_p2 <= (notrhs8_fu_757_p2 or notlhs8_fu_751_p2);
    tmp_44_i_i_i1_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_1288_p1),63));
    tmp_44_i_i_i2_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_1363_p1),63));
    tmp_44_i_i_i_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_1213_p1),63));
    tmp_45_fu_769_p2 <= (tmp_44_fu_763_p2 and tmp_32_reg_1617);
    tmp_45_i_i_i1_fu_1300_p2 <= std_logic_vector(shift_right(unsigned(tmp_42_i_i_i1_fu_1266_p4),to_integer(unsigned('0' & sh_assign_7_cast_cas_fu_1292_p1(25-1 downto 0)))));
    tmp_45_i_i_i2_fu_1375_p2 <= std_logic_vector(shift_right(unsigned(tmp_42_i_i_i2_fu_1341_p4),to_integer(unsigned('0' & sh_assign_9_cast_cas_fu_1367_p1(25-1 downto 0)))));
    tmp_45_i_i_i_fu_1225_p2 <= std_logic_vector(shift_right(unsigned(tmp_42_i_i_i_fu_1191_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_1217_p1(25-1 downto 0)))));
    tmp_46_i_i_i1_fu_1306_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i_i_i1_cast1_fu_1275_p1),to_integer(unsigned('0' & tmp_44_i_i_i1_fu_1296_p1(31-1 downto 0)))));
    tmp_46_i_i_i2_fu_1381_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i_i_i2_cast9_fu_1350_p1),to_integer(unsigned('0' & tmp_44_i_i_i2_fu_1371_p1(31-1 downto 0)))));
    tmp_46_i_i_i_fu_1231_p2 <= std_logic_vector(shift_left(unsigned(tmp_42_i_i_i_cast1_fu_1200_p1),to_integer(unsigned('0' & tmp_44_i_i_i_fu_1221_p1(31-1 downto 0)))));
    tmp_47_fu_774_p2 <= (tmp_45_fu_769_p2 and tmp_46_reg_1646);
    tmp_48_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_893_p3),8));
    tmp_49_fu_905_p4 <= tmp_38_i_i_i_fu_887_p2(31 downto 24);
    tmp_50_fu_1416_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_56_reg_1789));
    tmp_51_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_1161_p3),8));
    tmp_52_fu_1173_p4 <= tmp_38_i_i_i1_fu_1155_p2(31 downto 24);
    tmp_53_fu_1421_p3 <= 
        tmp_50_fu_1416_p2 when (p_Result_s_reg_1706(0) = '1') else 
        tmp_56_reg_1789;
    tmp_54_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_1237_p3),9));
    tmp_55_fu_1249_p4 <= tmp_46_i_i_i_fu_1231_p2(32 downto 24);
    tmp_56_fu_1259_p3 <= 
        tmp_54_fu_1245_p1 when (isNeg_2_reg_1721(0) = '1') else 
        tmp_55_fu_1249_p4;
    tmp_57_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_1312_p3),9));
    tmp_58_fu_1324_p4 <= tmp_46_i_i_i1_fu_1306_p2(32 downto 24);
    tmp_59_fu_1334_p3 <= 
        tmp_57_fu_1320_p1 when (isNeg_3_reg_1747(0) = '1') else 
        tmp_58_fu_1324_p4;
    tmp_60_fu_1428_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_59_reg_1795));
    tmp_61_fu_1433_p3 <= 
        tmp_60_fu_1428_p2 when (p_Result_1_reg_1732(0) = '1') else 
        tmp_59_reg_1795;
    tmp_62_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_1387_p3),9));
    tmp_63_fu_1399_p4 <= tmp_46_i_i_i2_fu_1381_p2(32 downto 24);
    tmp_64_fu_893_p3 <= tmp_37_i_i_i_fu_881_p2(24 downto 24);
    tmp_65_fu_1409_p3 <= 
        tmp_62_fu_1395_p1 when (isNeg_4_reg_1773(0) = '1') else 
        tmp_63_fu_1399_p4;
    tmp_66_fu_1440_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_65_reg_1801));
    tmp_67_fu_1445_p3 <= 
        tmp_66_fu_1440_p2 when (p_Result_2_reg_1758(0) = '1') else 
        tmp_65_reg_1801;
    tmp_72_fu_1161_p3 <= tmp_37_i_i_i1_fu_1149_p2(24 downto 24);
    tmp_76_fu_1237_p3 <= tmp_45_i_i_i_fu_1225_p2(24 downto 24);
    tmp_80_fu_1312_p3 <= tmp_45_i_i_i1_fu_1300_p2(24 downto 24);
    tmp_84_fu_1387_p3 <= tmp_45_i_i_i2_fu_1375_p2(24 downto 24);
    tmp_8_to_int_fu_451_p1 <= reg_389;
    tmp_9_fu_465_p1 <= tmp_8_to_int_fu_451_p1(23 - 1 downto 0);
    tmp_fu_455_p4 <= tmp_8_to_int_fu_451_p1(30 downto 23);
    tmp_i6_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vc),32));
    tmp_i_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(va),32));
    tmp_i_i_i_i1_cast_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_927_p4),9));
    tmp_i_i_i_i2_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_977_p4),9));
    tmp_i_i_i_i3_cast_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_6_fu_1027_p4),9));
    tmp_i_i_i_i4_cast8_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_8_fu_1077_p4),9));
    tmp_i_i_i_i_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_809_p4),9));
    y_integral_flag_2_phi_fu_291_p4 <= y_integral_flag_2_reg_287;
    y_integral_load_s_fu_432_p3 <= 
        y_integral when (rstIntN_read_reg_1536(0) = '1') else 
        ap_const_lv32_0;
    y_integral_new_1_fu_656_p3 <= 
        params_y_min_read_reg_1493 when (tmp_29_fu_623_p2(0) = '1') else 
        sel_tmp2_fu_649_p3;
end behav;
