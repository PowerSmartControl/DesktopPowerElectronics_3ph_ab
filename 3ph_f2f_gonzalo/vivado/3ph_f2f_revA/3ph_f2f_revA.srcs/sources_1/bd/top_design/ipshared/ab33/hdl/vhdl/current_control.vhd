-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity current_control is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_alfa_ref : IN STD_LOGIC_VECTOR (31 downto 0);
    i_beta_ref : IN STD_LOGIC_VECTOR (31 downto 0);
    ia : IN STD_LOGIC_VECTOR (11 downto 0);
    ib : IN STD_LOGIC_VECTOR (11 downto 0);
    ic : IN STD_LOGIC_VECTOR (11 downto 0);
    da : OUT STD_LOGIC_VECTOR (8 downto 0);
    db : OUT STD_LOGIC_VECTOR (8 downto 0);
    dc : OUT STD_LOGIC_VECTOR (8 downto 0);
    ialfa : OUT STD_LOGIC_VECTOR (7 downto 0);
    ibeta : OUT STD_LOGIC_VECTOR (7 downto 0);
    dalfa : OUT STD_LOGIC_VECTOR (7 downto 0);
    dbeta : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of current_control is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "current_control,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.833400,HLS_SYN_LAT=72,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=4776,HLS_SYN_LUT=7115}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C0200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000001000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_3AA00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111010101000000000000000000000";
    constant ap_const_lv32_3F99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110011001100110011010";
    constant ap_const_lv32_3EAAAAAB : STD_LOGIC_VECTOR (31 downto 0) := "00111110101010101010101010101011";
    constant ap_const_lv32_3F13CD3A : STD_LOGIC_VECTOR (31 downto 0) := "00111111000100111100110100111010";
    constant ap_const_lv32_BF000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F5DB3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010111011011001111010111";
    constant ap_const_lv32_42800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rstIntN : STD_LOGIC_VECTOR (0 downto 0);
    signal ctrlEna : STD_LOGIC_VECTOR (0 downto 0);
    signal params_Kp : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_max : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min : STD_LOGIC_VECTOR (31 downto 0);
    signal da_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal da_1_vld_reg : STD_LOGIC := '0';
    signal da_1_vld_in : STD_LOGIC;
    signal da_1_ack_in : STD_LOGIC;
    signal db_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal db_1_vld_reg : STD_LOGIC := '0';
    signal db_1_vld_in : STD_LOGIC;
    signal db_1_ack_in : STD_LOGIC;
    signal dc_1_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal dc_1_vld_reg : STD_LOGIC := '0';
    signal dc_1_vld_in : STD_LOGIC;
    signal dc_1_ack_in : STD_LOGIC;
    signal ialfa_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ialfa_1_vld_reg : STD_LOGIC := '0';
    signal ialfa_1_vld_in : STD_LOGIC;
    signal ialfa_1_ack_in : STD_LOGIC;
    signal ibeta_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ibeta_1_vld_reg : STD_LOGIC := '0';
    signal ibeta_1_vld_in : STD_LOGIC;
    signal ibeta_1_ack_in : STD_LOGIC;
    signal dalfa_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal dalfa_1_vld_reg : STD_LOGIC := '0';
    signal dalfa_1_vld_in : STD_LOGIC;
    signal dalfa_1_ack_in : STD_LOGIC;
    signal dbeta_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal dbeta_1_vld_reg : STD_LOGIC := '0';
    signal dbeta_1_vld_in : STD_LOGIC;
    signal dbeta_1_ack_in : STD_LOGIC;
    signal y_integral_alfa : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_integral_beta : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sat_alfa : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y_alfa : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_beta : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_36_reg_2122 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_2135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_i_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i8_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1994 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal params_y_min_read_reg_1999 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal params_y_max_read_reg_2010 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2_read_reg_2021 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kp_read_reg_2026 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrlEna_read_reg_2032 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_2038 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_rstIntN_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_rstIntN_reg_2044 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_alfa_load_1_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_alfa_load_1_reg_2049 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_beta_load_1_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_beta_load_1_reg_2054 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_2059 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2064 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_alfa_load_reg_2068 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_beta_load_reg_2073 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2078 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_2083 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_32_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_2099 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_33_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_2105 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_2112 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_2117 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_39_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_alfa_new_1_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_alfa_new_1_reg_2147 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal y_integral_beta_new_1_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_beta_new_1_reg_2153 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_2159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_59_reg_2164 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_758_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_2169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_25_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_2183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_65_reg_2188 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal tmp_27_fu_920_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal da_f_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal d_beta1_fu_979_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_2213 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_1008_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_2218 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_1022_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_2223 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_1040_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_2228 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_reg_2234 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_11_fu_1066_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_11_reg_2239 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_5_fu_1080_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_5_reg_2244 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_10_fu_1098_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_10_reg_2249 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_6_reg_2255 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_13_fu_1124_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_13_reg_2260 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_6_fu_1138_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_6_reg_2265 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_12_fu_1156_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_12_reg_2270 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_69_fu_1221_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_69_reg_2276 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal p_Val2_27_fu_1285_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_27_reg_2282 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_32_fu_1349_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_32_reg_2287 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_1361_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal p_Val2_29_fu_1377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_34_fu_1394_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_2307 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_7_fu_1424_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_7_reg_2312 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_6_fu_1432_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_reg_2317 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_3_reg_2322 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_fu_1446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i_reg_2328 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_2333 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_9_fu_1474_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_9_reg_2338 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_8_fu_1482_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_8_reg_2343 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_4_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i1_fu_1496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i1_reg_2354 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_fu_1570_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_8_reg_2359 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal p_Val2_4_fu_1645_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_4_reg_2364 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_17_fu_1661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal p_Val2_22_fu_1678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_2379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal loc_V_3_fu_1708_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_2384 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_1722_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_2389 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_1740_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_reg_2394 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_2_reg_2400 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_5_fu_1770_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_5_reg_2405 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_2_fu_1784_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_2410 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_5_fu_1802_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_reg_2415 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_fu_1867_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_reg_2421 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_79_fu_1931_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_reg_2427 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_fu_1943_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal tmp_81_fu_1955_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_integral_alfa_flag_2_phi_fu_265_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_alfa_flag_2_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal or_cond4_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_alfa_new_2_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_beta_new_2_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_8_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_9_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge1_fu_699_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_to_int_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_471_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_481_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_to_int_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min_to_int_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_540_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_550_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_557_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_567_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal params_y_max_to_int_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_684_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp10_cast_fu_696_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_to_int_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_716_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_726_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_to_int_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_769_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_779_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_to_int_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_821_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_831_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_to_int_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_878_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_888_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_alfa_neg_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_beta_neg_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_alfa_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_beta_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_998_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_1012_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_1016_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_i_i_fu_1030_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_i_i_i_cast_fu_1036_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal loc_V_10_fu_1056_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i5_cast_fu_1070_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_s_fu_1074_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_i2_fu_1088_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i2_cast_fu_1094_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal loc_V_12_fu_1114_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i6_cast_fu_1128_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_11_fu_1132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_i3_fu_1146_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i3_cast_fu_1152_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_i_i_i_fu_1164_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_1177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_1180_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_i_i_i_cast1_fu_1173_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_i_i_i_fu_1183_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_i_i_i_fu_1187_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_87_fu_1199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_i_i_fu_1193_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_67_fu_1207_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_68_fu_1211_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_i_i_i2_fu_1228_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_11_cast_fu_1241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_11_cast_ca_fu_1244_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i2_cast1_fu_1237_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_i_i_i2_fu_1247_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i2_fu_1251_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_113_fu_1263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i5_fu_1257_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_86_fu_1271_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_fu_1275_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_i_i_i3_fu_1292_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_13_cast_fu_1305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_13_cast_ca_fu_1308_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i3_cast1_fu_1301_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_i_i_i3_fu_1311_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i3_fu_1315_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_117_fu_1327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i6_fu_1321_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_89_fu_1335_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_90_fu_1339_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_70_fu_1356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_i2_fu_1368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_i2_fu_1371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_i3_fu_1385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_i3_fu_1388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_14_fu_1402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_6_fu_1414_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i3_cast_fu_1428_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_fu_1452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_8_fu_1464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i4_cast_fu_1478_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_i_i_i_fu_1502_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_i_i_i_cast_fu_1515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_fu_1518_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_cast_fu_1524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_7_cast_cas_fu_1528_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i_cast1_fu_1511_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_i_i_i_fu_1532_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i_fu_1536_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_105_fu_1548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i3_fu_1542_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_82_fu_1556_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_fu_1560_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_i_i_i1_fu_1577_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_i_i_i1_cast_fu_1590_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_fu_1593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_cast_fu_1599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_9_cast_cas_fu_1603_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i1_cast1_fu_1586_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_i_i_i1_fu_1607_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i1_fu_1611_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_109_fu_1623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i4_fu_1617_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_84_fu_1631_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_1635_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_i_i_i_fu_1652_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_i_fu_1655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_i1_fu_1669_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_i1_fu_1672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_1686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_1698_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast_fu_1712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_1716_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_i_i1_fu_1730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_i_i_i1_cast_fu_1736_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_9_fu_1748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_4_fu_1760_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i2_cast_fu_1774_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_1778_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_i_i2_fu_1792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_i_i_i2_cast_fu_1798_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_i_i_i1_fu_1810_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_3_cast_fu_1823_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_1826_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_i_i_i1_cast1_fu_1819_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_i_i_i1_fu_1829_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_i_i_i1_fu_1833_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_97_fu_1845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_i_i1_fu_1839_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_72_fu_1853_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_fu_1857_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_i_i_i2_fu_1874_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_5_cast_fu_1887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_1890_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_i_i_i2_cast1_fu_1883_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_i_i_i2_fu_1893_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_i_i_i2_fu_1897_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_101_fu_1909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_i_i2_fu_1903_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_77_fu_1917_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_fu_1921_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_fu_1938_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_fu_1950_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_312_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_317_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_352_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_357_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_block_state87 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);

    component current_control_fbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_control_fcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_control_sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_control_feOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component current_control_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rstIntN : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctrlEna : OUT STD_LOGIC_VECTOR (0 downto 0);
        params_Kp : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Ki2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_max : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_min : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_control_AXILiteS_s_axi_U : component current_control_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rstIntN => rstIntN,
        ctrlEna => ctrlEna,
        params_Kp => params_Kp,
        params_Ki2 => params_Ki2,
        params_y_max => params_y_max,
        params_y_min => params_y_min);

    current_control_fbkb_U0 : component current_control_fbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        opcode => grp_fu_312_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    current_control_fbkb_U1 : component current_control_fbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        opcode => grp_fu_317_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    current_control_fcud_U2 : component current_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_323_p0,
        din1 => grp_fu_323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    current_control_fcud_U3 : component current_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    current_control_fcud_U4 : component current_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_337_p0,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    current_control_fcud_U5 : component current_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_376,
        din1 => ap_const_lv32_42800000,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);

    current_control_sdEe_U6 : component current_control_sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_349_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p1);

    current_control_feOg_U7 : component current_control_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_352_p0,
        din1 => grp_fu_352_p1,
        opcode => grp_fu_352_opcode,
        dout => grp_fu_352_p2);

    current_control_feOg_U8 : component current_control_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_357_p0,
        din1 => grp_fu_357_p1,
        opcode => grp_fu_357_opcode,
        dout => grp_fu_357_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    da_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dalfa_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    db_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dbeta_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dc_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ialfa_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ibeta_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    x_assign_8_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                x_assign_8_reg_294 <= tmp_21_fu_863_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then 
                x_assign_8_reg_294 <= y_alfa_load_reg_2068;
            end if; 
        end if;
    end process;

    x_assign_9_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                x_assign_9_reg_303 <= tmp_27_fu_920_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then 
                x_assign_9_reg_303 <= y_beta_load_reg_2073;
            end if; 
        end if;
    end process;

    y_integral_alfa_flag_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                y_integral_alfa_flag_2_reg_261 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then 
                y_integral_alfa_flag_2_reg_261 <= not_rstIntN_reg_2044;
            end if; 
        end if;
    end process;

    y_integral_alfa_new_2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                y_integral_alfa_new_2_reg_272 <= y_integral_alfa_new_1_reg_2147;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then 
                y_integral_alfa_new_2_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_integral_beta_new_2_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                y_integral_beta_new_2_reg_283 <= y_integral_beta_new_1_reg_2153;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then 
                y_integral_beta_new_2_reg_283 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                ctrlEna_read_reg_2032 <= ctrlEna;
                not_rstIntN_reg_2044 <= not_rstIntN_fu_433_p2;
                or_cond_reg_2064 <= or_cond_fu_508_p2;
                params_Ki2_read_reg_2021 <= params_Ki2;
                params_Kp_read_reg_2026 <= params_Kp;
                params_y_max_read_reg_2010 <= params_y_max;
                params_y_min_read_reg_1999 <= params_y_min;
                tmp_5_reg_2038 <= grp_fu_312_p2;
                tmp_9_reg_2059 <= tmp_9_fu_497_p2;
                y_alfa_load_reg_2068 <= y_alfa;
                y_beta_load_reg_2073 <= y_beta;
                y_integral_alfa_load_1_reg_2049 <= y_integral_alfa_load_1_fu_439_p3;
                y_integral_beta_load_1_reg_2054 <= y_integral_beta_load_1_fu_447_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = da_1_vld_in) and (ap_const_logic_0 = da_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = da_1_vld_in) and (ap_const_logic_1 = da_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                da_1_data_reg <= tmp_71_fu_1361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dalfa_1_vld_in) and (ap_const_logic_0 = dalfa_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dalfa_1_vld_in) and (ap_const_logic_1 = dalfa_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                dalfa_1_data_reg <= p_Val2_29_fu_1377_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = db_1_vld_in) and (ap_const_logic_0 = db_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = db_1_vld_in) and (ap_const_logic_1 = db_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                db_1_data_reg <= tmp_76_fu_1943_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dbeta_1_vld_in) and (ap_const_logic_0 = dbeta_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dbeta_1_vld_in) and (ap_const_logic_1 = dbeta_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                dbeta_1_data_reg <= p_Val2_34_fu_1394_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dc_1_vld_in) and (ap_const_logic_0 = dc_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = dc_1_vld_in) and (ap_const_logic_1 = dc_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                dc_1_data_reg <= tmp_81_fu_1955_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ialfa_1_vld_in) and (ap_const_logic_0 = ialfa_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ialfa_1_vld_in) and (ap_const_logic_1 = ialfa_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                ialfa_1_data_reg <= p_Val2_17_fu_1661_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ibeta_1_vld_in) and (ap_const_logic_0 = ibeta_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ibeta_1_vld_in) and (ap_const_logic_1 = ibeta_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                ibeta_1_data_reg <= p_Val2_22_fu_1678_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                isNeg_1_reg_2389 <= sh_assign_2_fu_1716_p2(8 downto 8);
                isNeg_2_reg_2410 <= sh_assign_4_fu_1778_p2(8 downto 8);
                loc_V_3_reg_2384 <= loc_V_3_fu_1708_p1;
                loc_V_5_reg_2405 <= loc_V_5_fu_1770_p1;
                p_Result_1_reg_2379 <= p_Val2_5_fu_1686_p1(31 downto 31);
                p_Result_2_reg_2400 <= p_Val2_9_fu_1748_p1(31 downto 31);
                sh_assign_3_reg_2394 <= sh_assign_3_fu_1740_p3;
                sh_assign_5_reg_2415 <= sh_assign_5_fu_1802_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                isNeg_3_reg_2322 <= sh_assign_6_fu_1432_p2(8 downto 8);
                isNeg_4_reg_2348 <= sh_assign_8_fu_1482_p2(8 downto 8);
                loc_V_7_reg_2312 <= loc_V_7_fu_1424_p1;
                loc_V_9_reg_2338 <= loc_V_9_fu_1474_p1;
                p_Result_3_reg_2307 <= p_Val2_14_fu_1402_p1(31 downto 31);
                p_Result_4_reg_2333 <= p_Val2_19_fu_1452_p1(31 downto 31);
                sh_assign_6_reg_2317 <= sh_assign_6_fu_1432_p2;
                sh_assign_8_reg_2343 <= sh_assign_8_fu_1482_p2;
                tmp_5_i_i_i1_reg_2354 <= tmp_5_i_i_i1_fu_1496_p2;
                tmp_5_i_i_i_reg_2328 <= tmp_5_i_i_i_fu_1446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                isNeg_5_reg_2244 <= sh_assign_s_fu_1074_p2(8 downto 8);
                isNeg_6_reg_2265 <= sh_assign_11_fu_1132_p2(8 downto 8);
                isNeg_reg_2223 <= sh_assign_fu_1016_p2(8 downto 8);
                loc_V_11_reg_2239 <= loc_V_11_fu_1066_p1;
                loc_V_13_reg_2260 <= loc_V_13_fu_1124_p1;
                loc_V_1_reg_2218 <= loc_V_1_fu_1008_p1;
                p_Result_5_reg_2234 <= p_Val2_24_fu_944_p1(31 downto 31);
                p_Result_6_reg_2255 <= p_Val2_30_fu_958_p1(31 downto 31);
                p_Result_s_reg_2213 <= p_Val2_s_fu_986_p1(31 downto 31);
                sh_assign_10_reg_2249 <= sh_assign_10_fu_1098_p3;
                sh_assign_12_reg_2270 <= sh_assign_12_fu_1156_p3;
                sh_assign_1_reg_2228 <= sh_assign_1_fu_1040_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                p_Val2_27_reg_2282 <= p_Val2_27_fu_1285_p3;
                p_Val2_32_reg_2287 <= p_Val2_32_fu_1349_p3;
                tmp_69_reg_2276 <= tmp_69_fu_1221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                p_Val2_4_reg_2364 <= p_Val2_4_fu_1645_p3;
                p_Val2_8_reg_2359 <= p_Val2_8_fu_1570_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_361 <= grp_fu_349_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state78))) then
                reg_367 <= grp_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_376 <= grp_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (tmp_36_reg_2122 = ap_const_lv1_0) and (ap_const_lv1_0 = sel_tmp1_reg_2135)) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state83))) then
                reg_384 <= grp_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state59))) then
                reg_392 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state83))) then
                reg_399 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((tmp_36_reg_2122 = ap_const_lv1_0) and (ap_const_lv1_0 = sel_tmp1_reg_2135) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then
                reg_405 <= grp_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                sat_alfa <= storemerge1_fu_699_p3;
                y_integral_alfa_new_1_reg_2147 <= y_integral_alfa_new_1_fu_678_p3;
                y_integral_beta_new_1_reg_2153 <= y_integral_beta_new_1_fu_690_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                sel_tmp1_reg_2135 <= sel_tmp1_fu_667_p2;
                tmp_36_reg_2122 <= tmp_36_fu_611_p2;
                tmp_39_reg_2129 <= tmp_39_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_11_reg_2091 <= grp_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tmp_14_reg_1994 <= grp_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = or_cond_fu_508_p2))) then
                tmp_18_reg_2083 <= grp_fu_352_p2;
                tmp_8_reg_2078 <= tmp_8_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                tmp_19_reg_2169 <= tmp_19_fu_758_p3;
                tmp_25_reg_2176 <= tmp_25_fu_811_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                tmp_22_reg_2142 <= grp_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_32_reg_2099 <= tmp_32_fu_583_p2;
                tmp_33_reg_2105 <= tmp_33_fu_601_p2;
                tmp_35_reg_2112 <= grp_fu_352_p2;
                tmp_41_reg_2117 <= grp_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_47_reg_2159 <= grp_fu_352_p2;
                tmp_59_reg_2164 <= grp_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                tmp_53_reg_2183 <= grp_fu_352_p2;
                tmp_65_reg_2188 <= grp_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                tmp_74_reg_2421 <= tmp_74_fu_1867_p3;
                tmp_79_reg_2427 <= tmp_79_fu_1931_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_s_reg_1977 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                y_alfa <= tmp_21_fu_863_p3;
                y_beta <= tmp_27_fu_920_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) and (y_integral_alfa_flag_2_phi_fu_265_p4 = ap_const_lv1_1))) then
                y_integral_alfa <= y_integral_alfa_new_2_reg_272;
                y_integral_beta <= y_integral_beta_new_2_reg_283;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, da_1_ack_in, db_1_ack_in, dc_1_ack_in, ialfa_1_ack_in, ibeta_1_ack_in, dalfa_1_ack_in, dbeta_1_ack_in, or_cond_reg_2064, ap_CS_fsm_state45, or_cond4_fu_532_p2, ap_CS_fsm_state87)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and ((or_cond_reg_2064 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond4_fu_532_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = ialfa_1_ack_in) or (ap_const_logic_0 = ibeta_1_ack_in) or (ap_const_logic_0 = dalfa_1_ack_in) or (ap_const_logic_0 = dbeta_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);

    ap_block_state87_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, ialfa_1_ack_in, ibeta_1_ack_in, dalfa_1_ack_in, dbeta_1_ack_in)
    begin
                ap_block_state87 <= ((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = ialfa_1_ack_in) or (ap_const_logic_0 = ibeta_1_ack_in) or (ap_const_logic_0 = dalfa_1_ack_in) or (ap_const_logic_0 = dbeta_1_ack_in));
    end process;


    ap_done_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, ialfa_1_ack_in, ibeta_1_ack_in, dalfa_1_ack_in, dbeta_1_ack_in, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = ialfa_1_ack_in) or (ap_const_logic_0 = ibeta_1_ack_in) or (ap_const_logic_0 = dalfa_1_ack_in) or (ap_const_logic_0 = dbeta_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(da_1_ack_in, db_1_ack_in, dc_1_ack_in, ialfa_1_ack_in, ibeta_1_ack_in, dalfa_1_ack_in, dbeta_1_ack_in, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) and not(((ap_const_logic_0 = da_1_ack_in) or (ap_const_logic_0 = db_1_ack_in) or (ap_const_logic_0 = dc_1_ack_in) or (ap_const_logic_0 = ialfa_1_ack_in) or (ap_const_logic_0 = ibeta_1_ack_in) or (ap_const_logic_0 = dalfa_1_ack_in) or (ap_const_logic_0 = dbeta_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    d_alfa_fu_954_p1 <= d_alfa_neg_fu_948_p2;
    d_alfa_neg_fu_948_p2 <= (p_Val2_24_fu_944_p1 xor ap_const_lv32_80000000);
    d_beta1_fu_979_p3 <= 
        d_beta_fu_968_p1 when (ctrlEna_read_reg_2032(0) = '1') else 
        i_beta_ref;
    d_beta_fu_968_p1 <= d_beta_neg_fu_962_p2;
    d_beta_neg_fu_962_p2 <= (p_Val2_30_fu_958_p1 xor ap_const_lv32_80000000);
    da <= da_1_data_reg;

    da_1_ack_in_assign_proc : process(da_1_vld_reg)
    begin
        if (((ap_const_logic_0 = da_1_vld_reg) or ((ap_const_logic_1 = da_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            da_1_ack_in <= ap_const_logic_1;
        else 
            da_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    da_1_vld_in_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            da_1_vld_in <= ap_const_logic_1;
        else 
            da_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    da_f_fu_972_p3 <= 
        d_alfa_fu_954_p1 when (ctrlEna_read_reg_2032(0) = '1') else 
        i_alfa_ref;
    dalfa <= dalfa_1_data_reg;

    dalfa_1_ack_in_assign_proc : process(dalfa_1_vld_reg)
    begin
        if (((ap_const_logic_0 = dalfa_1_vld_reg) or ((ap_const_logic_1 = dalfa_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            dalfa_1_ack_in <= ap_const_logic_1;
        else 
            dalfa_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    dalfa_1_vld_in_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            dalfa_1_vld_in <= ap_const_logic_1;
        else 
            dalfa_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    db <= db_1_data_reg;

    db_1_ack_in_assign_proc : process(db_1_vld_reg)
    begin
        if (((ap_const_logic_0 = db_1_vld_reg) or ((ap_const_logic_1 = db_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            db_1_ack_in <= ap_const_logic_1;
        else 
            db_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    db_1_vld_in_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            db_1_vld_in <= ap_const_logic_1;
        else 
            db_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dbeta <= dbeta_1_data_reg;

    dbeta_1_ack_in_assign_proc : process(dbeta_1_vld_reg)
    begin
        if (((ap_const_logic_0 = dbeta_1_vld_reg) or ((ap_const_logic_1 = dbeta_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            dbeta_1_ack_in <= ap_const_logic_1;
        else 
            dbeta_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    dbeta_1_vld_in_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            dbeta_1_vld_in <= ap_const_logic_1;
        else 
            dbeta_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dc <= dc_1_data_reg;

    dc_1_ack_in_assign_proc : process(dc_1_vld_reg)
    begin
        if (((ap_const_logic_0 = dc_1_vld_reg) or ((ap_const_logic_1 = dc_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            dc_1_ack_in <= ap_const_logic_1;
        else 
            dc_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    dc_1_vld_in_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            dc_1_vld_in <= ap_const_logic_1;
        else 
            dc_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_312_opcode_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24, tmp_36_reg_2122, sel_tmp1_reg_2135, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state79, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state49, ap_CS_fsm_state60, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_312_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state66) or ((tmp_36_reg_2122 = ap_const_lv1_0) and (ap_const_lv1_0 = sel_tmp1_reg_2135) and (ap_const_logic_1 = ap_CS_fsm_state60)))) then 
            grp_fu_312_opcode <= ap_const_lv2_0;
        else 
            grp_fu_312_opcode <= "XX";
        end if; 
    end process;


    grp_fu_312_p0_assign_proc : process(i_alfa_ref, i_beta_ref, ap_CS_fsm_state15, reg_367, reg_376, reg_384, ap_CS_fsm_state24, reg_392, tmp_s_reg_1977, ap_CS_fsm_state38, ap_CS_fsm_state40, y_integral_alfa_load_1_reg_2049, y_integral_beta_load_1_reg_2054, ap_CS_fsm_state79, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state49, ap_CS_fsm_state60, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_312_p0 <= y_integral_beta_load_1_reg_2054;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_312_p0 <= y_integral_alfa_load_1_reg_2049;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_312_p0 <= i_beta_ref;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_312_p0 <= i_alfa_ref;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_312_p0 <= reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_312_p0 <= tmp_s_reg_1977;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            grp_fu_312_p0 <= reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_312_p0 <= reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_312_p0 <= reg_367;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_p1_assign_proc : process(ap_CS_fsm_state15, reg_367, reg_376, ap_CS_fsm_state24, reg_392, reg_405, ap_CS_fsm_state38, ap_CS_fsm_state40, y_integral_alfa_new_1_reg_2147, ap_CS_fsm_state79, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state49, ap_CS_fsm_state60, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_312_p1 <= reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_312_p1 <= y_integral_alfa_new_1_reg_2147;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_312_p1 <= reg_405;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_312_p1 <= reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_312_p1 <= reg_367;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_312_p1 <= ap_const_lv32_C0200000;
        else 
            grp_fu_312_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_317_opcode_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state29, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_317_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_317_opcode <= ap_const_lv2_0;
        else 
            grp_fu_317_opcode <= "XX";
        end if; 
    end process;


    grp_fu_317_p0_assign_proc : process(reg_367, tmp_22_reg_2142, ap_CS_fsm_state79, ap_CS_fsm_state29, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_317_p0 <= tmp_22_reg_2142;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_317_p0 <= reg_367;
        else 
            grp_fu_317_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_317_p1_assign_proc : process(reg_376, reg_392, y_integral_beta_new_1_reg_2153, ap_CS_fsm_state79, ap_CS_fsm_state29, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_317_p1 <= reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_317_p1 <= y_integral_beta_new_1_reg_2153;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_317_p1 <= reg_376;
        else 
            grp_fu_317_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_p0_assign_proc : process(reg_361, reg_384, reg_399, tmp_5_reg_2038, da_f_fu_972_p3, ap_CS_fsm_state75, ap_CS_fsm_state45, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_323_p0 <= da_f_fu_972_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_323_p0 <= tmp_5_reg_2038;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_323_p0 <= reg_399;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_323_p0 <= reg_384;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_323_p0 <= reg_361;
        else 
            grp_fu_323_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_p1_assign_proc : process(params_Ki2_read_reg_2021, ap_CS_fsm_state75, ap_CS_fsm_state45, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_323_p1 <= ap_const_lv32_BF000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            grp_fu_323_p1 <= params_Ki2_read_reg_2021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_323_p1 <= ap_const_lv32_3F13CD3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_323_p1 <= ap_const_lv32_3EAAAAAB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_323_p1 <= ap_const_lv32_3F99999A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_323_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_323_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p0_assign_proc : process(reg_361, reg_367, reg_384, ap_CS_fsm_state75, d_beta1_fu_979_p3, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_329_p0 <= d_beta1_fu_979_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_329_p0 <= reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_329_p0 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_329_p0 <= reg_361;
        else 
            grp_fu_329_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p1_assign_proc : process(params_Kp_read_reg_2026, ap_CS_fsm_state75, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_329_p1 <= ap_const_lv32_3F5DB3D7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_329_p1 <= params_Kp_read_reg_2026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_329_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_329_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_329_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_337_p0_assign_proc : process(reg_367, tmp_5_reg_2038, ap_CS_fsm_state75, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_337_p0 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_337_p0 <= tmp_5_reg_2038;
        else 
            grp_fu_337_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_337_p1_assign_proc : process(params_Kp_read_reg_2026, ap_CS_fsm_state75, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_337_p1 <= ap_const_lv32_42800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_337_p1 <= params_Kp_read_reg_2026;
        else 
            grp_fu_337_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_349_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, tmp_i_fu_410_p1, tmp_i3_fu_415_p1, ap_CS_fsm_state5, tmp_i8_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_349_p0 <= tmp_i8_fu_420_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_349_p0 <= tmp_i3_fu_415_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_349_p0 <= tmp_i_fu_410_p1;
        else 
            grp_fu_349_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_opcode_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, or_cond_fu_508_p2, ap_CS_fsm_state54, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = or_cond_fu_508_p2)) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_352_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_352_opcode <= ap_const_lv5_4;
        else 
            grp_fu_352_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_352_p0_assign_proc : process(reg_384, ap_CS_fsm_state43, ap_CS_fsm_state44, tmp_11_reg_2091, ap_CS_fsm_state54, ap_CS_fsm_state71, tmp_19_reg_2169, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_352_p0 <= tmp_19_reg_2169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_352_p0 <= tmp_11_reg_2091;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_352_p0 <= reg_384;
        else 
            grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_p1_assign_proc : process(ap_CS_fsm_state43, params_y_min_read_reg_1999, ap_CS_fsm_state44, params_y_max_read_reg_2010, ap_CS_fsm_state54, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_352_p1 <= params_y_max_read_reg_2010;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_352_p1 <= params_y_min_read_reg_1999;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_352_p1 <= ap_const_lv32_0;
        else 
            grp_fu_352_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_357_opcode_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_357_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_357_opcode <= ap_const_lv5_2;
        else 
            grp_fu_357_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_357_p0_assign_proc : process(reg_399, tmp_11_reg_2091, ap_CS_fsm_state54, ap_CS_fsm_state71, tmp_25_reg_2176, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_357_p0 <= tmp_25_reg_2176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_357_p0 <= reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_357_p0 <= tmp_11_reg_2091;
        else 
            grp_fu_357_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_357_p1_assign_proc : process(params_y_min_read_reg_1999, params_y_max_read_reg_2010, ap_CS_fsm_state54, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_357_p1 <= params_y_min_read_reg_1999;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_357_p1 <= params_y_max_read_reg_2010;
        else 
            grp_fu_357_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ialfa <= ialfa_1_data_reg;

    ialfa_1_ack_in_assign_proc : process(ialfa_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ialfa_1_vld_reg) or ((ap_const_logic_1 = ialfa_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            ialfa_1_ack_in <= ap_const_logic_1;
        else 
            ialfa_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ialfa_1_vld_in_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            ialfa_1_vld_in <= ap_const_logic_1;
        else 
            ialfa_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ibeta <= ibeta_1_data_reg;

    ibeta_1_ack_in_assign_proc : process(ibeta_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ibeta_1_vld_reg) or ((ap_const_logic_1 = ibeta_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            ibeta_1_ack_in <= ap_const_logic_1;
        else 
            ibeta_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ibeta_1_vld_in_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            ibeta_1_vld_in <= ap_const_logic_1;
        else 
            ibeta_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_1722_p3 <= sh_assign_2_fu_1716_p2(8 downto 8);
    isNeg_2_fu_1784_p3 <= sh_assign_4_fu_1778_p2(8 downto 8);
    isNeg_5_fu_1080_p3 <= sh_assign_s_fu_1074_p2(8 downto 8);
    isNeg_6_fu_1138_p3 <= sh_assign_11_fu_1132_p2(8 downto 8);
    isNeg_fu_1022_p3 <= sh_assign_fu_1016_p2(8 downto 8);
    loc_V_10_fu_1056_p4 <= p_Val2_24_fu_944_p1(30 downto 23);
    loc_V_11_fu_1066_p1 <= p_Val2_24_fu_944_p1(23 - 1 downto 0);
    loc_V_12_fu_1114_p4 <= p_Val2_30_fu_958_p1(30 downto 23);
    loc_V_13_fu_1124_p1 <= p_Val2_30_fu_958_p1(23 - 1 downto 0);
    loc_V_1_fu_1008_p1 <= p_Val2_s_fu_986_p1(23 - 1 downto 0);
    loc_V_2_fu_1698_p4 <= p_Val2_5_fu_1686_p1(30 downto 23);
    loc_V_3_fu_1708_p1 <= p_Val2_5_fu_1686_p1(23 - 1 downto 0);
    loc_V_4_fu_1760_p4 <= p_Val2_9_fu_1748_p1(30 downto 23);
    loc_V_5_fu_1770_p1 <= p_Val2_9_fu_1748_p1(23 - 1 downto 0);
    loc_V_6_fu_1414_p4 <= p_Val2_14_fu_1402_p1(30 downto 23);
    loc_V_7_fu_1424_p1 <= p_Val2_14_fu_1402_p1(23 - 1 downto 0);
    loc_V_8_fu_1464_p4 <= p_Val2_19_fu_1452_p1(30 downto 23);
    loc_V_9_fu_1474_p1 <= p_Val2_19_fu_1452_p1(23 - 1 downto 0);
    loc_V_fu_998_p4 <= p_Val2_s_fu_986_p1(30 downto 23);
    not_rstIntN_fu_433_p2 <= (rstIntN xor ap_const_lv1_1);
    notlhs1_fu_783_p2 <= "0" when (tmp_55_fu_769_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_571_p2 <= "0" when (tmp_24_fu_540_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_589_p2 <= "0" when (tmp_30_fu_557_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_892_p2 <= "0" when (tmp_61_fu_878_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_633_p2 <= "0" when (tmp_37_fu_619_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_730_p2 <= "0" when (tmp_43_fu_716_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_835_p2 <= "0" when (tmp_49_fu_821_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_485_p2 <= "0" when (tmp_fu_471_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_789_p2 <= "1" when (tmp_56_fu_779_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_577_p2 <= "1" when (tmp_26_fu_550_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_595_p2 <= "1" when (tmp_31_fu_567_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_898_p2 <= "1" when (tmp_62_fu_888_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_639_p2 <= "1" when (tmp_38_fu_629_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_736_p2 <= "1" when (tmp_44_fu_726_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_841_p2 <= "1" when (tmp_50_fu_831_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_491_p2 <= "1" when (tmp_7_fu_481_p1 = ap_const_lv23_0) else "0";
    or_cond4_fu_532_p2 <= (tmp_8_reg_2078 and tmp_20_fu_528_p2);
    or_cond_fu_508_p2 <= (tmp_6_fu_459_p3 and tmp_15_fu_503_p2);
    p_Val2_14_fu_1402_p1 <= grp_fu_337_p2;
    p_Val2_17_fu_1661_p3 <= 
        tmp_10_i_i_i_fu_1655_p2 when (p_Result_3_reg_2307(0) = '1') else 
        tmp_1_i_i_i_fu_1652_p1;
    p_Val2_19_fu_1452_p1 <= grp_fu_344_p2;
    p_Val2_22_fu_1678_p3 <= 
        tmp_10_i_i_i1_fu_1672_p2 when (p_Result_4_reg_2333(0) = '1') else 
        tmp_1_i_i_i1_fu_1669_p1;
    p_Val2_24_fu_944_p1 <= x_assign_8_reg_294;
    p_Val2_27_fu_1285_p3 <= 
        tmp_86_fu_1271_p1 when (isNeg_5_reg_2244(0) = '1') else 
        tmp_88_fu_1275_p4;
    p_Val2_29_fu_1377_p3 <= 
        tmp_10_i_i_i2_fu_1371_p2 when (p_Result_5_reg_2234(0) = '1') else 
        tmp_1_i_i_i2_fu_1368_p1;
    p_Val2_30_fu_958_p1 <= x_assign_9_reg_303;
    p_Val2_32_fu_1349_p3 <= 
        tmp_89_fu_1335_p1 when (isNeg_6_reg_2265(0) = '1') else 
        tmp_90_fu_1339_p4;
    p_Val2_34_fu_1394_p3 <= 
        tmp_10_i_i_i3_fu_1388_p2 when (p_Result_6_reg_2255(0) = '1') else 
        tmp_1_i_i_i3_fu_1385_p1;
    p_Val2_4_fu_1645_p3 <= 
        tmp_84_fu_1631_p1 when (isNeg_4_reg_2348(0) = '1') else 
        tmp_85_fu_1635_p4;
    p_Val2_5_fu_1686_p1 <= reg_384;
    p_Val2_8_fu_1570_p3 <= 
        tmp_82_fu_1556_p1 when (isNeg_3_reg_2322(0) = '1') else 
        tmp_83_fu_1560_p4;
    p_Val2_9_fu_1748_p1 <= reg_399;
    p_Val2_s_fu_986_p1 <= da_f_fu_972_p3;
    params_y_max_to_int_fu_616_p1 <= params_y_max_read_reg_2010;
    params_y_min_to_int_fu_554_p1 <= params_y_min_read_reg_1999;
    sel_tmp10_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp1_reg_2135),2));
    sel_tmp1_fu_667_p2 <= (tmp_42_fu_656_p2 and sel_tmp_fu_661_p2);
    sel_tmp2_fu_673_p3 <= 
        params_y_max_read_reg_2010 when (sel_tmp1_reg_2135(0) = '1') else 
        tmp_11_reg_2091;
    sel_tmp6_fu_684_p3 <= 
        params_y_max_read_reg_2010 when (sel_tmp1_reg_2135(0) = '1') else 
        reg_384;
    sel_tmp_fu_661_p2 <= (tmp_36_fu_611_p2 xor ap_const_lv1_1);
    sh_assign_10_fu_1098_p3 <= 
        tmp_5_i_i_i2_cast_fu_1094_p1 when (isNeg_5_fu_1080_p3(0) = '1') else 
        sh_assign_s_fu_1074_p2;
        sh_assign_11_cast_ca_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_10_reg_2249),25));

        sh_assign_11_cast_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_10_reg_2249),32));

    sh_assign_11_fu_1132_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i6_cast_fu_1128_p1));
    sh_assign_12_fu_1156_p3 <= 
        tmp_5_i_i_i3_cast_fu_1152_p1 when (isNeg_6_fu_1138_p3(0) = '1') else 
        sh_assign_11_fu_1132_p2;
        sh_assign_13_cast_ca_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_12_reg_2270),25));

        sh_assign_13_cast_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_12_reg_2270),32));

        sh_assign_1_cast_cas_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_2228),25));

        sh_assign_1_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_2228),32));

    sh_assign_1_fu_1040_p3 <= 
        tmp_12_i_i_i_cast_fu_1036_p1 when (isNeg_fu_1022_p3(0) = '1') else 
        sh_assign_fu_1016_p2;
    sh_assign_2_fu_1716_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast_fu_1712_p1));
        sh_assign_3_cast_cas_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_2394),25));

        sh_assign_3_cast_fu_1823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_2394),32));

    sh_assign_3_fu_1740_p3 <= 
        tmp_12_i_i_i1_cast_fu_1736_p1 when (isNeg_1_fu_1722_p3(0) = '1') else 
        sh_assign_2_fu_1716_p2;
    sh_assign_4_fu_1778_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast_fu_1774_p1));
        sh_assign_5_cast_cas_fu_1890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_2415),25));

        sh_assign_5_cast_fu_1887_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_2415),32));

    sh_assign_5_fu_1802_p3 <= 
        tmp_12_i_i_i2_cast_fu_1798_p1 when (isNeg_2_fu_1784_p3(0) = '1') else 
        sh_assign_4_fu_1778_p2;
    sh_assign_6_fu_1432_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i3_cast_fu_1428_p1));
        sh_assign_7_cast_cas_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1518_p3),25));

        sh_assign_7_cast_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1518_p3),32));

    sh_assign_7_fu_1518_p3 <= 
        tmp_5_i_i_i_cast_fu_1515_p1 when (isNeg_3_reg_2322(0) = '1') else 
        sh_assign_6_reg_2317;
    sh_assign_8_fu_1482_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i4_cast_fu_1478_p1));
        sh_assign_9_cast_cas_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_1593_p3),25));

        sh_assign_9_cast_fu_1599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_1593_p3),32));

    sh_assign_9_fu_1593_p3 <= 
        tmp_5_i_i_i1_cast_fu_1590_p1 when (isNeg_4_reg_2348(0) = '1') else 
        sh_assign_8_reg_2343;
    sh_assign_fu_1016_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_1012_p1));
    sh_assign_s_fu_1074_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i5_cast_fu_1070_p1));
    storemerge1_fu_699_p3 <= 
        ap_const_lv2_3 when (tmp_36_reg_2122(0) = '1') else 
        sel_tmp10_cast_fu_696_p1;
    tmp_101_fu_1909_p3 <= tmp_14_i_i_i2_fu_1897_p2(24 downto 24);
    tmp_105_fu_1548_p3 <= tmp_8_i_i_i_fu_1536_p2(24 downto 24);
    tmp_109_fu_1623_p3 <= tmp_8_i_i_i1_fu_1611_p2(24 downto 24);
    tmp_10_i_i_i1_fu_1672_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_1_i_i_i1_fu_1669_p1));
    tmp_10_i_i_i2_fu_1371_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_1_i_i_i2_fu_1368_p1));
    tmp_10_i_i_i3_fu_1388_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_1_i_i_i3_fu_1385_p1));
    tmp_10_i_i_i_fu_1655_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_1_i_i_i_fu_1652_p1));
    tmp_113_fu_1263_p3 <= tmp_8_i_i_i2_fu_1251_p2(24 downto 24);
    tmp_117_fu_1327_p3 <= tmp_8_i_i_i3_fu_1315_p2(24 downto 24);
    tmp_11_i_i_i1_cast1_fu_1819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_i_i1_fu_1810_p4),63));
    tmp_11_i_i_i1_fu_1810_p4 <= ((ap_const_lv1_1 & loc_V_3_reg_2384) & ap_const_lv1_0);
    tmp_11_i_i_i2_cast1_fu_1883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_i_i2_fu_1874_p4),63));
    tmp_11_i_i_i2_fu_1874_p4 <= ((ap_const_lv1_1 & loc_V_5_reg_2405) & ap_const_lv1_0);
    tmp_11_i_i_i_cast1_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_i_i_fu_1164_p4),63));
    tmp_11_i_i_i_fu_1164_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_2218) & ap_const_lv1_0);
    tmp_11_to_int_fu_537_p1 <= tmp_11_reg_2091;
        tmp_12_i_i_i1_cast_fu_1736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_i_i_i1_fu_1730_p2),9));

    tmp_12_i_i_i1_fu_1730_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_1698_p4));
        tmp_12_i_i_i2_cast_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_i_i_i2_fu_1792_p2),9));

    tmp_12_i_i_i2_fu_1792_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_4_fu_1760_p4));
        tmp_12_i_i_i_cast_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_i_i_i_fu_1030_p2),9));

    tmp_12_i_i_i_fu_1030_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_998_p4));
    tmp_13_i_i_i1_fu_1829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1823_p1),63));
    tmp_13_i_i_i2_fu_1893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_1887_p1),63));
    tmp_13_i_i_i_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1177_p1),63));
    tmp_14_i_i_i1_fu_1833_p2 <= std_logic_vector(shift_right(unsigned(tmp_11_i_i_i1_fu_1810_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_1826_p1(25-1 downto 0)))));
    tmp_14_i_i_i2_fu_1897_p2 <= std_logic_vector(shift_right(unsigned(tmp_11_i_i_i2_fu_1874_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_1890_p1(25-1 downto 0)))));
    tmp_14_i_i_i_fu_1187_p2 <= std_logic_vector(shift_right(unsigned(tmp_11_i_i_i_fu_1164_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_1180_p1(25-1 downto 0)))));
    tmp_15_fu_503_p2 <= (tmp_9_fu_497_p2 and tmp_14_reg_1994);
    tmp_15_i_i_i1_fu_1839_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_i_i_i1_cast1_fu_1819_p1),to_integer(unsigned('0' & tmp_13_i_i_i1_fu_1829_p1(31-1 downto 0)))));
    tmp_15_i_i_i2_fu_1903_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_i_i_i2_cast1_fu_1883_p1),to_integer(unsigned('0' & tmp_13_i_i_i2_fu_1893_p1(31-1 downto 0)))));
    tmp_15_i_i_i_fu_1193_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_i_i_i_cast1_fu_1173_p1),to_integer(unsigned('0' & tmp_13_i_i_i_fu_1183_p1(31-1 downto 0)))));
    tmp_17_to_int_fu_712_p1 <= reg_384;
    tmp_19_fu_758_p3 <= 
        reg_384 when (tmp_48_fu_753_p2(0) = '1') else 
        params_y_min_read_reg_1999;
    tmp_19_to_int_fu_818_p1 <= tmp_19_reg_2169;
    tmp_1_i_i_i1_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_reg_2364),8));
    tmp_1_i_i_i2_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_27_reg_2282),8));
    tmp_1_i_i_i3_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_32_reg_2287),8));
    tmp_1_i_i_i_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_reg_2359),8));
    tmp_20_fu_528_p2 <= (tmp_9_reg_2059 and tmp_18_reg_2083);
    tmp_21_fu_863_p3 <= 
        tmp_19_reg_2169 when (tmp_54_fu_858_p2(0) = '1') else 
        params_y_max_read_reg_2010;
    tmp_23_to_int_fu_765_p1 <= reg_399;
    tmp_24_fu_540_p4 <= tmp_11_to_int_fu_537_p1(30 downto 23);
    tmp_25_fu_811_p3 <= 
        reg_399 when (tmp_60_fu_806_p2(0) = '1') else 
        params_y_min_read_reg_1999;
    tmp_25_to_int_fu_875_p1 <= tmp_25_reg_2176;
    tmp_26_fu_550_p1 <= tmp_11_to_int_fu_537_p1(23 - 1 downto 0);
    tmp_27_fu_920_p3 <= 
        tmp_25_reg_2176 when (tmp_66_fu_915_p2(0) = '1') else 
        params_y_max_read_reg_2010;
    tmp_30_fu_557_p4 <= params_y_min_to_int_fu_554_p1(30 downto 23);
    tmp_31_fu_567_p1 <= params_y_min_to_int_fu_554_p1(23 - 1 downto 0);
    tmp_32_fu_583_p2 <= (notrhs2_fu_577_p2 or notlhs2_fu_571_p2);
    tmp_33_fu_601_p2 <= (notrhs3_fu_595_p2 or notlhs3_fu_589_p2);
    tmp_34_fu_607_p2 <= (tmp_32_reg_2099 and tmp_33_reg_2105);
    tmp_36_fu_611_p2 <= (tmp_34_fu_607_p2 and tmp_35_reg_2112);
    tmp_37_fu_619_p4 <= params_y_max_to_int_fu_616_p1(30 downto 23);
    tmp_38_fu_629_p1 <= params_y_max_to_int_fu_616_p1(23 - 1 downto 0);
    tmp_39_fu_645_p2 <= (notrhs5_fu_639_p2 or notlhs5_fu_633_p2);
    tmp_3_i_i_i1_cast1_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i1_fu_1577_p4),55));
    tmp_3_i_i_i1_fu_1577_p4 <= ((ap_const_lv1_1 & loc_V_9_reg_2338) & ap_const_lv1_0);
    tmp_3_i_i_i2_cast1_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i2_fu_1228_p4),55));
    tmp_3_i_i_i2_fu_1228_p4 <= ((ap_const_lv1_1 & loc_V_11_reg_2239) & ap_const_lv1_0);
    tmp_3_i_i_i3_cast1_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i3_fu_1292_p4),55));
    tmp_3_i_i_i3_fu_1292_p4 <= ((ap_const_lv1_1 & loc_V_13_reg_2260) & ap_const_lv1_0);
    tmp_3_i_i_i_cast1_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i_fu_1502_p4),55));
    tmp_3_i_i_i_fu_1502_p4 <= ((ap_const_lv1_1 & loc_V_7_reg_2312) & ap_const_lv1_0);
    tmp_40_fu_651_p2 <= (tmp_32_reg_2099 and tmp_39_fu_645_p2);
    tmp_42_fu_656_p2 <= (tmp_40_fu_651_p2 and tmp_41_reg_2117);
    tmp_43_fu_716_p4 <= tmp_17_to_int_fu_712_p1(30 downto 23);
    tmp_44_fu_726_p1 <= tmp_17_to_int_fu_712_p1(23 - 1 downto 0);
    tmp_45_fu_742_p2 <= (notrhs6_fu_736_p2 or notlhs6_fu_730_p2);
    tmp_46_fu_748_p2 <= (tmp_45_fu_742_p2 and tmp_33_reg_2105);
    tmp_48_fu_753_p2 <= (tmp_46_fu_748_p2 and tmp_47_reg_2159);
    tmp_49_fu_821_p4 <= tmp_19_to_int_fu_818_p1(30 downto 23);
    tmp_4_to_int_fu_467_p1 <= reg_384;
    tmp_50_fu_831_p1 <= tmp_19_to_int_fu_818_p1(23 - 1 downto 0);
    tmp_51_fu_847_p2 <= (notrhs8_fu_841_p2 or notlhs8_fu_835_p2);
    tmp_52_fu_853_p2 <= (tmp_51_fu_847_p2 and tmp_39_reg_2129);
    tmp_54_fu_858_p2 <= (tmp_52_fu_853_p2 and tmp_53_reg_2183);
    tmp_55_fu_769_p4 <= tmp_23_to_int_fu_765_p1(30 downto 23);
    tmp_56_fu_779_p1 <= tmp_23_to_int_fu_765_p1(23 - 1 downto 0);
    tmp_57_fu_795_p2 <= (notrhs1_fu_789_p2 or notlhs1_fu_783_p2);
    tmp_58_fu_801_p2 <= (tmp_57_fu_795_p2 and tmp_33_reg_2105);
        tmp_5_i_i_i1_cast_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i1_reg_2354),9));

    tmp_5_i_i_i1_fu_1496_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_8_fu_1464_p4));
        tmp_5_i_i_i2_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i2_fu_1088_p2),9));

    tmp_5_i_i_i2_fu_1088_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_10_fu_1056_p4));
        tmp_5_i_i_i3_cast_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i3_fu_1146_p2),9));

    tmp_5_i_i_i3_fu_1146_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_12_fu_1114_p4));
        tmp_5_i_i_i_cast_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i_reg_2328),9));

    tmp_5_i_i_i_fu_1446_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_6_fu_1414_p4));
    tmp_60_fu_806_p2 <= (tmp_58_fu_801_p2 and tmp_59_reg_2164);
    tmp_61_fu_878_p4 <= tmp_25_to_int_fu_875_p1(30 downto 23);
    tmp_62_fu_888_p1 <= tmp_25_to_int_fu_875_p1(23 - 1 downto 0);
    tmp_63_fu_904_p2 <= (notrhs4_fu_898_p2 or notlhs4_fu_892_p2);
    tmp_64_fu_910_p2 <= (tmp_63_fu_904_p2 and tmp_39_reg_2129);
    tmp_66_fu_915_p2 <= (tmp_64_fu_910_p2 and tmp_65_reg_2188);
    tmp_67_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_1199_p3),9));
    tmp_68_fu_1211_p4 <= tmp_15_i_i_i_fu_1193_p2(32 downto 24);
    tmp_69_fu_1221_p3 <= 
        tmp_67_fu_1207_p1 when (isNeg_reg_2223(0) = '1') else 
        tmp_68_fu_1211_p4;
    tmp_6_fu_459_p3 <= sat_alfa(1 downto 1);
    tmp_70_fu_1356_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_69_reg_2276));
    tmp_71_fu_1361_p3 <= 
        tmp_70_fu_1356_p2 when (p_Result_s_reg_2213(0) = '1') else 
        tmp_69_reg_2276;
    tmp_72_fu_1853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_1845_p3),9));
    tmp_73_fu_1857_p4 <= tmp_15_i_i_i1_fu_1839_p2(32 downto 24);
    tmp_74_fu_1867_p3 <= 
        tmp_72_fu_1853_p1 when (isNeg_1_reg_2389(0) = '1') else 
        tmp_73_fu_1857_p4;
    tmp_75_fu_1938_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_74_reg_2421));
    tmp_76_fu_1943_p3 <= 
        tmp_75_fu_1938_p2 when (p_Result_1_reg_2379(0) = '1') else 
        tmp_74_reg_2421;
    tmp_77_fu_1917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1909_p3),9));
    tmp_78_fu_1921_p4 <= tmp_15_i_i_i2_fu_1903_p2(32 downto 24);
    tmp_79_fu_1931_p3 <= 
        tmp_77_fu_1917_p1 when (isNeg_2_reg_2410(0) = '1') else 
        tmp_78_fu_1921_p4;
    tmp_7_fu_481_p1 <= tmp_4_to_int_fu_467_p1(23 - 1 downto 0);
    tmp_7_i_i_i1_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_1599_p1),55));
    tmp_7_i_i_i2_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_1241_p1),55));
    tmp_7_i_i_i3_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_13_cast_fu_1305_p1),55));
    tmp_7_i_i_i_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_1524_p1),55));
    tmp_80_fu_1950_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_79_reg_2427));
    tmp_81_fu_1955_p3 <= 
        tmp_80_fu_1950_p2 when (p_Result_2_reg_2400(0) = '1') else 
        tmp_79_reg_2427;
    tmp_82_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1548_p3),7));
    tmp_83_fu_1560_p4 <= tmp_i_i_i3_fu_1542_p2(30 downto 24);
    tmp_84_fu_1631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_1623_p3),7));
    tmp_85_fu_1635_p4 <= tmp_i_i_i4_fu_1617_p2(30 downto 24);
    tmp_86_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_1263_p3),7));
    tmp_87_fu_1199_p3 <= tmp_14_i_i_i_fu_1187_p2(24 downto 24);
    tmp_88_fu_1275_p4 <= tmp_i_i_i5_fu_1257_p2(30 downto 24);
    tmp_89_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_1327_p3),7));
    tmp_8_fu_522_p2 <= "1" when (sat_alfa = ap_const_lv2_1) else "0";
    tmp_8_i_i_i1_fu_1611_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i1_fu_1577_p4),to_integer(unsigned('0' & sh_assign_9_cast_cas_fu_1603_p1(25-1 downto 0)))));
    tmp_8_i_i_i2_fu_1251_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i2_fu_1228_p4),to_integer(unsigned('0' & sh_assign_11_cast_ca_fu_1244_p1(25-1 downto 0)))));
    tmp_8_i_i_i3_fu_1315_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i3_fu_1292_p4),to_integer(unsigned('0' & sh_assign_13_cast_ca_fu_1308_p1(25-1 downto 0)))));
    tmp_8_i_i_i_fu_1536_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i_fu_1502_p4),to_integer(unsigned('0' & sh_assign_7_cast_cas_fu_1528_p1(25-1 downto 0)))));
    tmp_90_fu_1339_p4 <= tmp_i_i_i6_fu_1321_p2(30 downto 24);
    tmp_97_fu_1845_p3 <= tmp_14_i_i_i1_fu_1833_p2(24 downto 24);
    tmp_9_fu_497_p2 <= (notrhs_fu_491_p2 or notlhs_fu_485_p2);
    tmp_fu_471_p4 <= tmp_4_to_int_fu_467_p1(30 downto 23);
    tmp_i3_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ib),32));
    tmp_i8_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ic),32));
    tmp_i_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia),32));
    tmp_i_i_i3_fu_1542_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i_cast1_fu_1511_p1),to_integer(unsigned('0' & tmp_7_i_i_i_fu_1532_p1(31-1 downto 0)))));
    tmp_i_i_i4_fu_1617_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i1_cast1_fu_1586_p1),to_integer(unsigned('0' & tmp_7_i_i_i1_fu_1607_p1(31-1 downto 0)))));
    tmp_i_i_i5_fu_1257_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i2_cast1_fu_1237_p1),to_integer(unsigned('0' & tmp_7_i_i_i2_fu_1247_p1(31-1 downto 0)))));
    tmp_i_i_i6_fu_1321_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i3_cast1_fu_1301_p1),to_integer(unsigned('0' & tmp_7_i_i_i3_fu_1311_p1(31-1 downto 0)))));
    tmp_i_i_i_i1_cast_fu_1712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_1698_p4),9));
    tmp_i_i_i_i2_cast_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_1760_p4),9));
    tmp_i_i_i_i3_cast_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_6_fu_1414_p4),9));
    tmp_i_i_i_i4_cast_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_8_fu_1464_p4),9));
    tmp_i_i_i_i5_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_10_fu_1056_p4),9));
    tmp_i_i_i_i6_cast_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_12_fu_1114_p4),9));
    tmp_i_i_i_i_cast_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_998_p4),9));
    y_integral_alfa_flag_2_phi_fu_265_p4 <= y_integral_alfa_flag_2_reg_261;
    y_integral_alfa_load_1_fu_439_p3 <= 
        y_integral_alfa when (rstIntN(0) = '1') else 
        ap_const_lv32_0;
    y_integral_alfa_new_1_fu_678_p3 <= 
        params_y_min_read_reg_1999 when (tmp_36_reg_2122(0) = '1') else 
        sel_tmp2_fu_673_p3;
    y_integral_beta_load_1_fu_447_p3 <= 
        y_integral_beta when (rstIntN(0) = '1') else 
        ap_const_lv32_0;
    y_integral_beta_new_1_fu_690_p3 <= 
        params_y_min_read_reg_1999 when (tmp_36_reg_2122(0) = '1') else 
        sel_tmp6_fu_684_p3;
end behav;
