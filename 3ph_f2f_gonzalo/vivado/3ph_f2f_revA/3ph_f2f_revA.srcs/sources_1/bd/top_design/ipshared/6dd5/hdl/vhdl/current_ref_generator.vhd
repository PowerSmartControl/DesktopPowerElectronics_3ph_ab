-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity current_ref_generator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vea : IN STD_LOGIC_VECTOR (31 downto 0);
    va : IN STD_LOGIC_VECTOR (11 downto 0);
    vb : IN STD_LOGIC_VECTOR (11 downto 0);
    vc : IN STD_LOGIC_VECTOR (11 downto 0);
    i_alfa_ref : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_beta_ref : OUT STD_LOGIC_VECTOR (31 downto 0);
    alfa_ref8b : OUT STD_LOGIC_VECTOR (7 downto 0);
    beta_ref8b : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of current_ref_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "current_ref_generator,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.501500,HLS_SYN_LAT=76,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=3282,HLS_SYN_LUT=4853}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_C0200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000001000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3AA00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111010101000000000000000000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_3EAAAAAB : STD_LOGIC_VECTOR (31 downto 0) := "00111110101010101010101010101011";
    constant ap_const_lv32_3F2AAAAB : STD_LOGIC_VECTOR (31 downto 0) := "00111111001010101010101010101011";
    constant ap_const_lv32_42800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F13CD3A : STD_LOGIC_VECTOR (31 downto 0) := "00111111000100111100110100111010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_alfa_ref_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_alfa_ref_1_vld_reg : STD_LOGIC := '0';
    signal i_alfa_ref_1_vld_in : STD_LOGIC;
    signal i_alfa_ref_1_ack_in : STD_LOGIC;
    signal i_beta_ref_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_beta_ref_1_vld_reg : STD_LOGIC := '0';
    signal i_beta_ref_1_vld_in : STD_LOGIC;
    signal i_beta_ref_1_ack_in : STD_LOGIC;
    signal alfa_ref8b_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal alfa_ref8b_1_vld_reg : STD_LOGIC := '0';
    signal alfa_ref8b_1_vld_in : STD_LOGIC;
    signal alfa_ref8b_1_ack_in : STD_LOGIC;
    signal beta_ref8b_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal beta_ref8b_1_vld_reg : STD_LOGIC := '0';
    signal beta_ref8b_1_vld_in : STD_LOGIC;
    signal beta_ref8b_1_ack_in : STD_LOGIC;
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i6_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_A_Bn_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_A_Bn_1_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal p_Result_s_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal loc_V_1_fu_265_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_427 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_432 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_i_i_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_i_i_i_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_361_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_2_reg_448 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal p_Val2_4_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_140_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_149_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_255_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast1_fu_269_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_i_fu_293_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_6_i_i_i_cast_fu_306_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_309_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_319_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_i_i_i_cast2_fu_302_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i_fu_323_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_9_i_i_i_fu_327_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_10_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_i_fu_333_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_fu_347_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_351_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_i_i_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_i_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_140_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_block_state77 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);

    component current_ref_generbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_ref_genercud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_ref_generdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_ref_genereOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component current_ref_generfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_ref_generbkb_U0 : component current_ref_generbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_140_p0,
        din1 => grp_fu_140_p1,
        opcode => grp_fu_140_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    current_ref_genercud_U1 : component current_ref_genercud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_186,
        din1 => reg_198,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    current_ref_generdEe_U2 : component current_ref_generdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_149_p0,
        din1 => grp_fu_149_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    current_ref_generdEe_U3 : component current_ref_generdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    current_ref_genereOg_U4 : component current_ref_genereOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_186,
        din1 => reg_205,
        ce => ap_const_logic_1,
        dout => grp_fu_169_p2);

    current_ref_genereOg_U5 : component current_ref_genereOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_213,
        din1 => reg_205,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    current_ref_generfYi_U6 : component current_ref_generfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_177_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    alfa_ref8b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    beta_ref8b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_alfa_ref_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_beta_ref_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = alfa_ref8b_1_vld_in) and (ap_const_logic_0 = alfa_ref8b_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = alfa_ref8b_1_vld_in) and (ap_const_logic_1 = alfa_ref8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                alfa_ref8b_1_data_reg <= p_Val2_4_fu_377_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = beta_ref8b_1_vld_in) and (ap_const_logic_0 = beta_ref8b_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = beta_ref8b_1_vld_in) and (ap_const_logic_1 = beta_ref8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                beta_ref8b_1_data_reg <= p_Val2_4_fu_377_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = i_alfa_ref_1_vld_in) and (ap_const_logic_0 = i_alfa_ref_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = i_alfa_ref_1_vld_in) and (ap_const_logic_1 = i_alfa_ref_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                i_alfa_ref_1_data_reg <= reg_186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = i_beta_ref_1_vld_in) and (ap_const_logic_0 = i_beta_ref_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = i_beta_ref_1_vld_in) and (ap_const_logic_1 = i_beta_ref_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                i_beta_ref_1_data_reg <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                isNeg_reg_437 <= sh_assign_fu_273_p2(8 downto 8);
                loc_V_1_reg_427 <= loc_V_1_fu_265_p1;
                p_Result_s_reg_422 <= p_Val2_s_fu_243_p1(31 downto 31);
                sh_assign_reg_432 <= sh_assign_fu_273_p2;
                tmp_6_i_i_i_reg_443 <= tmp_6_i_i_i_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                p_Val2_2_reg_448 <= p_Val2_2_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_180 <= grp_fu_177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state70))) then
                reg_186 <= grp_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_198 <= grp_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
                reg_205 <= grp_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state70))) then
                reg_213 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_222 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_3_reg_401 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                v_A_Bn_1_reg_411 <= grp_fu_173_p2;
                v_A_Bn_reg_406 <= grp_fu_169_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, i_alfa_ref_1_ack_in, i_beta_ref_1_ack_in, alfa_ref8b_1_ack_in, beta_ref8b_1_ack_in, ap_CS_fsm_state77)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and not(((ap_const_logic_0 = i_alfa_ref_1_ack_in) or (ap_const_logic_0 = i_beta_ref_1_ack_in) or (ap_const_logic_0 = alfa_ref8b_1_ack_in) or (ap_const_logic_0 = beta_ref8b_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    alfa_ref8b <= alfa_ref8b_1_data_reg;

    alfa_ref8b_1_ack_in_assign_proc : process(alfa_ref8b_1_vld_reg)
    begin
        if (((ap_const_logic_0 = alfa_ref8b_1_vld_reg) or ((ap_const_logic_1 = alfa_ref8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            alfa_ref8b_1_ack_in <= ap_const_logic_1;
        else 
            alfa_ref8b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    alfa_ref8b_1_vld_in_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            alfa_ref8b_1_vld_in <= ap_const_logic_1;
        else 
            alfa_ref8b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);

    ap_block_state77_assign_proc : process(i_alfa_ref_1_ack_in, i_beta_ref_1_ack_in, alfa_ref8b_1_ack_in, beta_ref8b_1_ack_in)
    begin
                ap_block_state77 <= ((ap_const_logic_0 = i_alfa_ref_1_ack_in) or (ap_const_logic_0 = i_beta_ref_1_ack_in) or (ap_const_logic_0 = alfa_ref8b_1_ack_in) or (ap_const_logic_0 = beta_ref8b_1_ack_in));
    end process;


    ap_done_assign_proc : process(i_alfa_ref_1_ack_in, i_beta_ref_1_ack_in, alfa_ref8b_1_ack_in, beta_ref8b_1_ack_in, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) and not(((ap_const_logic_0 = i_alfa_ref_1_ack_in) or (ap_const_logic_0 = i_beta_ref_1_ack_in) or (ap_const_logic_0 = alfa_ref8b_1_ack_in) or (ap_const_logic_0 = beta_ref8b_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(i_alfa_ref_1_ack_in, i_beta_ref_1_ack_in, alfa_ref8b_1_ack_in, beta_ref8b_1_ack_in, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) and not(((ap_const_logic_0 = i_alfa_ref_1_ack_in) or (ap_const_logic_0 = i_beta_ref_1_ack_in) or (ap_const_logic_0 = alfa_ref8b_1_ack_in) or (ap_const_logic_0 = beta_ref8b_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    beta_ref8b <= beta_ref8b_1_data_reg;

    beta_ref8b_1_ack_in_assign_proc : process(beta_ref8b_1_vld_reg)
    begin
        if (((ap_const_logic_0 = beta_ref8b_1_vld_reg) or ((ap_const_logic_1 = beta_ref8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            beta_ref8b_1_ack_in <= ap_const_logic_1;
        else 
            beta_ref8b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    beta_ref8b_1_vld_in_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            beta_ref8b_1_vld_in <= ap_const_logic_1;
        else 
            beta_ref8b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_140_opcode_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_140_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_fu_140_opcode <= ap_const_lv2_0;
        else 
            grp_fu_140_opcode <= "XX";
        end if; 
    end process;


    grp_fu_140_p0_assign_proc : process(ap_CS_fsm_state15, reg_186, reg_198, reg_205, ap_CS_fsm_state24, reg_213, reg_222, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_140_p0 <= reg_205;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_140_p0 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_140_p0 <= reg_213;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_fu_140_p0 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_140_p0 <= reg_186;
        else 
            grp_fu_140_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_140_p1_assign_proc : process(ap_CS_fsm_state15, reg_186, reg_198, ap_CS_fsm_state24, reg_222, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_140_p1 <= reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_140_p1 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_140_p1 <= reg_186;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_140_p1 <= ap_const_lv32_C0200000;
        else 
            grp_fu_140_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p0_assign_proc : process(reg_180, reg_186, reg_205, v_A_Bn_reg_406, ap_CS_fsm_state63, ap_CS_fsm_state71, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_149_p0 <= v_A_Bn_reg_406;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_149_p0 <= reg_186;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_149_p0 <= reg_205;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_149_p0 <= reg_180;
        else 
            grp_fu_149_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p1_assign_proc : process(vea, reg_186, ap_CS_fsm_state63, ap_CS_fsm_state71, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_149_p1 <= ap_const_lv32_42800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_149_p1 <= ap_const_lv32_3F2AAAAB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_149_p1 <= vea;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_149_p1 <= reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_149_p1 <= ap_const_lv32_3EAAAAAB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_149_p1 <= ap_const_lv32_40C00000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_149_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_149_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p0_assign_proc : process(reg_180, reg_186, reg_213, tmp_3_reg_401, v_A_Bn_1_reg_411, ap_CS_fsm_state63, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_155_p0 <= v_A_Bn_1_reg_411;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_155_p0 <= reg_213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_155_p0 <= tmp_3_reg_401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_155_p0 <= reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_155_p0 <= reg_180;
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p1_assign_proc : process(vea, reg_213, ap_CS_fsm_state63, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_155_p1 <= ap_const_lv32_3F2AAAAB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_155_p1 <= vea;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_155_p1 <= reg_213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_155_p1 <= ap_const_lv32_3F13CD3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_155_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_155_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_155_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, tmp_i_fu_228_p1, tmp_i1_fu_233_p1, ap_CS_fsm_state5, tmp_i6_fu_238_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_177_p0 <= tmp_i6_fu_238_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_177_p0 <= tmp_i1_fu_233_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_177_p0 <= tmp_i_fu_228_p1;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_alfa_ref <= i_alfa_ref_1_data_reg;

    i_alfa_ref_1_ack_in_assign_proc : process(i_alfa_ref_1_vld_reg)
    begin
        if (((ap_const_logic_0 = i_alfa_ref_1_vld_reg) or ((ap_const_logic_1 = i_alfa_ref_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            i_alfa_ref_1_ack_in <= ap_const_logic_1;
        else 
            i_alfa_ref_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    i_alfa_ref_1_vld_in_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            i_alfa_ref_1_vld_in <= ap_const_logic_1;
        else 
            i_alfa_ref_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    i_beta_ref <= i_beta_ref_1_data_reg;

    i_beta_ref_1_ack_in_assign_proc : process(i_beta_ref_1_vld_reg)
    begin
        if (((ap_const_logic_0 = i_beta_ref_1_vld_reg) or ((ap_const_logic_1 = i_beta_ref_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            i_beta_ref_1_ack_in <= ap_const_logic_1;
        else 
            i_beta_ref_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    i_beta_ref_1_vld_in_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            i_beta_ref_1_vld_in <= ap_const_logic_1;
        else 
            i_beta_ref_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_265_p1 <= p_Val2_s_fu_243_p1(23 - 1 downto 0);
    loc_V_fu_255_p4 <= p_Val2_s_fu_243_p1(30 downto 23);
    p_Val2_2_fu_361_p3 <= 
        tmp_fu_347_p1 when (isNeg_reg_437(0) = '1') else 
        tmp_6_fu_351_p4;
    p_Val2_4_fu_377_p3 <= 
        tmp_10_i_i_i_fu_371_p2 when (p_Result_s_reg_422(0) = '1') else 
        tmp_i_i_i_fu_368_p1;
    p_Val2_s_fu_243_p1 <= grp_fu_149_p2;
        sh_assign_1_cast_cas_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_309_p3),25));

        sh_assign_1_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_309_p3),32));

    sh_assign_1_fu_309_p3 <= 
        tmp_6_i_i_i_cast_fu_306_p1 when (isNeg_reg_437(0) = '1') else 
        sh_assign_reg_432;
    sh_assign_fu_273_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast1_fu_269_p1));
    tmp_10_fu_339_p3 <= tmp_9_i_i_i_fu_327_p2(24 downto 24);
    tmp_10_i_i_i_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_i_i_i_fu_368_p1));
    tmp_1_i_i_i_fu_333_p2 <= std_logic_vector(shift_left(unsigned(tmp_4_i_i_i_cast2_fu_302_p1),to_integer(unsigned('0' & tmp_8_i_i_i_fu_323_p1(31-1 downto 0)))));
    tmp_4_i_i_i_cast2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_i_i_fu_293_p4),55));
    tmp_4_i_i_i_fu_293_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_427) & ap_const_lv1_0);
    tmp_6_fu_351_p4 <= tmp_1_i_i_i_fu_333_p2(30 downto 24);
        tmp_6_i_i_i_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_i_i_i_reg_443),9));

    tmp_6_i_i_i_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_255_p4));
    tmp_8_i_i_i_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_315_p1),55));
    tmp_9_i_i_i_fu_327_p2 <= std_logic_vector(shift_right(unsigned(tmp_4_i_i_i_fu_293_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_319_p1(25-1 downto 0)))));
    tmp_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_339_p3),7));
    tmp_i1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vb),32));
    tmp_i6_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vc),32));
    tmp_i_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(va),32));
    tmp_i_i_i_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_448),8));
    tmp_i_i_i_i_cast1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_255_p4),9));
end behav;
