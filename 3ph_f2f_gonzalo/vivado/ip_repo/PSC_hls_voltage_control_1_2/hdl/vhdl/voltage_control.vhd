-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voltage_control is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vdc : IN STD_LOGIC_VECTOR (11 downto 0);
    vea : OUT STD_LOGIC_VECTOR (31 downto 0);
    vea8b : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of voltage_control is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "voltage_control,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.256000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=2051,HLS_SYN_LUT=3439}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3AA00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111010101000000000000000000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rstIntN : STD_LOGIC_VECTOR (0 downto 0);
    signal ctrlByp : STD_LOGIC_VECTOR (0 downto 0);
    signal params_vRef : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kp : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_max : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min : STD_LOGIC_VECTOR (31 downto 0);
    signal vea_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal vea_1_vld_reg : STD_LOGIC := '0';
    signal vea_1_vld_in : STD_LOGIC;
    signal vea_1_ack_in : STD_LOGIC;
    signal vea8b_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal vea8b_1_vld_reg : STD_LOGIC := '0';
    signal vea8b_1_vld_in : STD_LOGIC;
    signal vea8b_1_ack_in : STD_LOGIC;
    signal y_integral : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sat : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_6_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal params_y_min_read_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal params_y_max_read_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Ki2_read_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_Kp_read_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_vRef_read_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrlByp_read_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal rstIntN_read_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal not_rstIntN_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_rstIntN_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal y_integral_load_s_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_load_s_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_20_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_new_1_fu_465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_integral_new_1_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_34_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_10_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_40_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal x_assign_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_Result_s_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_633_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_917 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_665_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_927 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_730_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_2_reg_933 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal p_Val2_4_fu_746_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal y_integral_flag_2_phi_fu_168_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_integral_flag_2_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal or_cond5_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal y_integral_new_2_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_state45 : BOOLEAN;
    signal storemerge1_fu_476_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_to_int_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_274_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_to_int_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_min_to_int_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_336_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_343_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_353_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal params_y_max_to_int_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_406_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_cast_fu_472_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_to_int_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_494_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_504_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_to_int_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_546_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_556_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_623_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast8_fu_637_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_641_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_i_i_i_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_i_i_i_cast_fu_661_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_i_i_i_fu_673_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_689_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_16_i_i_i_cast9_fu_682_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_18_i_i_i_fu_692_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_19_i_i_i_fu_696_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_47_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_i_i_fu_702_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_42_fu_716_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_720_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_i_i_i_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_i_i_i_fu_740_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_186_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_204_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component voltage_control_fbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voltage_control_fcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voltage_control_sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voltage_control_feOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component voltage_control_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rstIntN : OUT STD_LOGIC_VECTOR (0 downto 0);
        ctrlByp : OUT STD_LOGIC_VECTOR (0 downto 0);
        params_vRef : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Kp : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_Ki2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_max : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_min : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    voltage_control_AXILiteS_s_axi_U : component voltage_control_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rstIntN => rstIntN,
        ctrlByp => ctrlByp,
        params_vRef => params_vRef,
        params_Kp => params_Kp,
        params_Ki2 => params_Ki2,
        params_y_max => params_y_max,
        params_y_min => params_y_min);

    voltage_control_fbkb_U0 : component voltage_control_fbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        opcode => grp_fu_186_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    voltage_control_fcud_U1 : component voltage_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_191_p0,
        din1 => grp_fu_191_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);

    voltage_control_fcud_U2 : component voltage_control_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_219,
        din1 => params_Kp_read_reg_792,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    voltage_control_sdEe_U3 : component voltage_control_sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_201_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p1);

    voltage_control_feOg_U4 : component voltage_control_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        opcode => grp_fu_204_opcode,
        dout => grp_fu_204_p2);

    voltage_control_feOg_U5 : component voltage_control_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_219,
        din1 => params_y_max_read_reg_778,
        opcode => ap_const_lv5_2,
        dout => tmp_28_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    vea8b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    vea_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    y_integral_flag_2_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                y_integral_flag_2_reg_164 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and ((or_cond_reg_834 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond5_fu_317_p2)))) then 
                y_integral_flag_2_reg_164 <= not_rstIntN_reg_819;
            end if; 
        end if;
    end process;

    y_integral_new_2_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                y_integral_new_2_reg_175 <= y_integral_new_1_reg_884;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and ((or_cond_reg_834 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond5_fu_317_p2)))) then 
                y_integral_new_2_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ctrlByp_read_reg_803 <= ctrlByp;
                params_Ki2_read_reg_787 <= params_Ki2;
                params_Kp_read_reg_792 <= params_Kp;
                params_vRef_read_reg_797 <= params_vRef;
                params_y_max_read_reg_778 <= params_y_max;
                params_y_min_read_reg_770 <= params_y_min;
                rstIntN_read_reg_808 <= rstIntN;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                isNeg_reg_922 <= sh_assign_fu_641_p2(8 downto 8);
                loc_V_1_reg_917 <= loc_V_1_fu_633_p1;
                p_Result_s_reg_912 <= p_Val2_s_fu_611_p1(31 downto 31);
                sh_assign_1_reg_927 <= sh_assign_1_fu_665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                not_rstIntN_reg_819 <= not_rstIntN_fu_236_p2;
                or_cond_reg_834 <= or_cond_fu_301_p2;
                tmp_5_reg_829 <= tmp_5_fu_290_p2;
                y_integral_load_s_reg_824 <= y_integral_load_s_fu_241_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                p_Val2_2_reg_933 <= p_Val2_2_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_213 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_219 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                sat <= storemerge1_fu_476_p3;
                y_integral_new_1_reg_884 <= y_integral_new_1_fu_465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_10_reg_895 <= tmp_10_fu_536_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (or_cond_fu_301_p2 = ap_const_lv1_0))) then
                tmp_13_reg_843 <= grp_fu_204_p2;
                tmp_1_reg_838 <= tmp_1_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_19_reg_856 <= tmp_19_fu_369_p2;
                tmp_20_reg_862 <= tmp_20_fu_387_p2;
                tmp_22_reg_868 <= grp_fu_204_p2;
                tmp_26_reg_873 <= tmp_26_fu_422_p2;
                tmp_28_reg_879 <= tmp_28_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_34_reg_890 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_40_reg_902 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_6_reg_814 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_7_reg_851 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_i_6_reg_765 <= grp_fu_201_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = vea8b_1_vld_in) and (ap_const_logic_0 = vea8b_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = vea8b_1_vld_in) and (ap_const_logic_1 = vea8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                vea8b_1_data_reg <= p_Val2_4_fu_746_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = vea_1_vld_in) and (ap_const_logic_0 = vea_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = vea_1_vld_in) and (ap_const_logic_1 = vea_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                vea_1_data_reg <= x_assign_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                y <= tmp_12_fu_588_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and not(((ap_const_logic_0 = vea_1_ack_in) or (ap_const_logic_0 = vea8b_1_ack_in))) and (y_integral_flag_2_phi_fu_168_p4 = ap_const_lv1_1))) then
                y_integral <= y_integral_new_2_reg_175;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, vea_1_ack_in, vea8b_1_ack_in, or_cond_reg_834, ap_CS_fsm_state22, or_cond5_fu_317_p2, ap_CS_fsm_state45)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and ((or_cond_reg_834 = ap_const_lv1_1) or (ap_const_lv1_1 = or_cond5_fu_317_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and not(((ap_const_logic_0 = vea_1_ack_in) or (ap_const_logic_0 = vea8b_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state45_assign_proc : process(vea_1_ack_in, vea8b_1_ack_in)
    begin
                ap_block_state45 <= ((ap_const_logic_0 = vea_1_ack_in) or (ap_const_logic_0 = vea8b_1_ack_in));
    end process;


    ap_done_assign_proc : process(vea_1_ack_in, vea8b_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and not(((ap_const_logic_0 = vea_1_ack_in) or (ap_const_logic_0 = vea8b_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(vea_1_ack_in, vea8b_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and not(((ap_const_logic_0 = vea_1_ack_in) or (ap_const_logic_0 = vea8b_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_186_opcode_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_186_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_186_opcode <= ap_const_lv2_0;
        else 
            grp_fu_186_opcode <= "XX";
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(params_vRef, ap_CS_fsm_state15, y_integral_load_s_reg_824, tmp_7_reg_851, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_186_p0 <= tmp_7_reg_851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_186_p0 <= y_integral_load_s_reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_186_p0 <= params_vRef;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(reg_213, ap_CS_fsm_state15, y_integral_new_1_reg_884, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_186_p1 <= y_integral_new_1_reg_884;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_186_p1 <= reg_213;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p0_assign_proc : process(reg_213, reg_219, tmp_i_6_reg_765, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_191_p0 <= reg_219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_191_p0 <= reg_213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_191_p0 <= tmp_i_6_reg_765;
        else 
            grp_fu_191_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p1_assign_proc : process(params_Ki2_read_reg_787, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_191_p1 <= params_Ki2_read_reg_787;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_191_p1 <= ap_const_lv32_40C00000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_191_p1 <= ap_const_lv32_3AA00000;
        else 
            grp_fu_191_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_201_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vdc),32));

    grp_fu_204_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, or_cond_fu_301_p2, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state21) and (or_cond_fu_301_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_204_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_204_opcode <= ap_const_lv5_4;
        else 
            grp_fu_204_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(reg_219, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state38, tmp_10_reg_895, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_204_p0 <= tmp_10_reg_895;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_204_p0 <= reg_219;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(params_y_min_read_reg_770, params_y_max_read_reg_778, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_204_p1 <= params_y_max_read_reg_778;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_204_p1 <= params_y_min_read_reg_770;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_204_p1 <= ap_const_lv32_0;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_fu_647_p3 <= sh_assign_fu_641_p2(8 downto 8);
    loc_V_1_fu_633_p1 <= p_Val2_s_fu_611_p1(23 - 1 downto 0);
    loc_V_fu_623_p4 <= p_Val2_s_fu_611_p1(30 downto 23);
    not_rstIntN_fu_236_p2 <= (rstIntN_read_reg_808 xor ap_const_lv1_1);
    notlhs2_fu_357_p2 <= "0" when (tmp_15_fu_326_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_375_p2 <= "0" when (tmp_17_fu_343_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_410_p2 <= "0" when (tmp_24_fu_396_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_508_p2 <= "0" when (tmp_30_fu_494_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_560_p2 <= "0" when (tmp_36_fu_546_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_278_p2 <= "0" when (tmp_fu_264_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_363_p2 <= "1" when (tmp_16_fu_336_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_381_p2 <= "1" when (tmp_18_fu_353_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_416_p2 <= "1" when (tmp_25_fu_406_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_514_p2 <= "1" when (tmp_31_fu_504_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_566_p2 <= "1" when (tmp_37_fu_556_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_284_p2 <= "1" when (tmp_9_fu_274_p1 = ap_const_lv23_0) else "0";
    or_cond5_fu_317_p2 <= (tmp_1_reg_838 and tmp_14_fu_313_p2);
    or_cond_fu_301_p2 <= (tmp_2_fu_252_p3 and tmp_11_fu_296_p2);
    p_Val2_2_fu_730_p3 <= 
        tmp_42_fu_716_p1 when (isNeg_reg_922(0) = '1') else 
        tmp_43_fu_720_p4;
    p_Val2_4_fu_746_p3 <= 
        tmp_25_i_i_i_fu_740_p2 when (p_Result_s_reg_912(0) = '1') else 
        tmp_22_i_i_i_fu_737_p1;
    p_Val2_s_fu_611_p1 <= x_assign_fu_604_p3;
    params_y_max_to_int_fu_393_p1 <= params_y_max_read_reg_778;
    params_y_min_to_int_fu_340_p1 <= params_y_min_read_reg_770;
    sel_tmp1_fu_452_p2 <= (tmp_29_fu_441_p2 and sel_tmp_fu_446_p2);
    sel_tmp2_fu_458_p3 <= 
        params_y_max_read_reg_778 when (sel_tmp1_fu_452_p2(0) = '1') else 
        reg_219;
    sel_tmp6_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp1_fu_452_p2),2));
    sel_tmp_fu_446_p2 <= (tmp_23_fu_432_p2 xor ap_const_lv1_1);
        sh_assign_1_cast_cas_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_927),25));

        sh_assign_1_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_927),32));

    sh_assign_1_fu_665_p3 <= 
        tmp_17_i_i_i_cast_fu_661_p1 when (isNeg_fu_647_p3(0) = '1') else 
        sh_assign_fu_641_p2;
    sh_assign_fu_641_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast8_fu_637_p1));
    storemerge1_fu_476_p3 <= 
        ap_const_lv2_3 when (tmp_23_fu_432_p2(0) = '1') else 
        sel_tmp6_cast_fu_472_p1;
    tmp_10_fu_536_p3 <= 
        reg_219 when (tmp_35_fu_531_p2(0) = '1') else 
        params_y_min_read_reg_770;
    tmp_10_to_int_fu_490_p1 <= reg_219;
    tmp_11_fu_296_p2 <= (tmp_5_fu_290_p2 and tmp_6_reg_814);
    tmp_12_fu_588_p3 <= 
        tmp_10_reg_895 when (tmp_41_fu_583_p2(0) = '1') else 
        params_y_max_read_reg_778;
    tmp_12_to_int_fu_543_p1 <= tmp_10_reg_895;
    tmp_14_fu_313_p2 <= (tmp_5_reg_829 and tmp_13_reg_843);
    tmp_15_fu_326_p4 <= tmp_4_to_int_fu_322_p1(30 downto 23);
    tmp_16_fu_336_p1 <= tmp_4_to_int_fu_322_p1(23 - 1 downto 0);
    tmp_16_i_i_i_cast9_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_i_i_i_fu_673_p4),55));
    tmp_16_i_i_i_fu_673_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_917) & ap_const_lv1_0);
    tmp_17_fu_343_p4 <= params_y_min_to_int_fu_340_p1(30 downto 23);
        tmp_17_i_i_i_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_i_i_i_fu_655_p2),9));

    tmp_17_i_i_i_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_623_p4));
    tmp_18_fu_353_p1 <= params_y_min_to_int_fu_340_p1(23 - 1 downto 0);
    tmp_18_i_i_i_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_686_p1),55));
    tmp_19_fu_369_p2 <= (notrhs2_fu_363_p2 or notlhs2_fu_357_p2);
    tmp_19_i_i_i_fu_696_p2 <= std_logic_vector(shift_right(unsigned(tmp_16_i_i_i_fu_673_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_689_p1(25-1 downto 0)))));
    tmp_1_fu_307_p2 <= "1" when (sat = ap_const_lv2_1) else "0";
    tmp_20_fu_387_p2 <= (notrhs3_fu_381_p2 or notlhs3_fu_375_p2);
    tmp_20_i_i_i_fu_702_p2 <= std_logic_vector(shift_left(unsigned(tmp_16_i_i_i_cast9_fu_682_p1),to_integer(unsigned('0' & tmp_18_i_i_i_fu_692_p1(31-1 downto 0)))));
    tmp_21_fu_428_p2 <= (tmp_19_reg_856 and tmp_20_reg_862);
    tmp_22_i_i_i_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_933),8));
    tmp_23_fu_432_p2 <= (tmp_21_fu_428_p2 and tmp_22_reg_868);
    tmp_24_fu_396_p4 <= params_y_max_to_int_fu_393_p1(30 downto 23);
    tmp_25_fu_406_p1 <= params_y_max_to_int_fu_393_p1(23 - 1 downto 0);
    tmp_25_i_i_i_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_22_i_i_i_fu_737_p1));
    tmp_26_fu_422_p2 <= (notrhs5_fu_416_p2 or notlhs5_fu_410_p2);
    tmp_27_fu_437_p2 <= (tmp_19_reg_856 and tmp_26_reg_873);
    tmp_29_fu_441_p2 <= (tmp_27_fu_437_p2 and tmp_28_reg_879);
    tmp_2_fu_252_p3 <= sat(1 downto 1);
    tmp_30_fu_494_p4 <= tmp_10_to_int_fu_490_p1(30 downto 23);
    tmp_31_fu_504_p1 <= tmp_10_to_int_fu_490_p1(23 - 1 downto 0);
    tmp_32_fu_520_p2 <= (notrhs6_fu_514_p2 or notlhs6_fu_508_p2);
    tmp_33_fu_526_p2 <= (tmp_32_fu_520_p2 and tmp_20_reg_862);
    tmp_35_fu_531_p2 <= (tmp_33_fu_526_p2 and tmp_34_reg_890);
    tmp_36_fu_546_p4 <= tmp_12_to_int_fu_543_p1(30 downto 23);
    tmp_37_fu_556_p1 <= tmp_12_to_int_fu_543_p1(23 - 1 downto 0);
    tmp_38_fu_572_p2 <= (notrhs8_fu_566_p2 or notlhs8_fu_560_p2);
    tmp_39_fu_578_p2 <= (tmp_38_fu_572_p2 and tmp_26_reg_873);
    tmp_41_fu_583_p2 <= (tmp_39_fu_578_p2 and tmp_40_reg_902);
    tmp_42_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_708_p3),7));
    tmp_43_fu_720_p4 <= tmp_20_i_i_i_fu_702_p2(30 downto 24);
    tmp_47_fu_708_p3 <= tmp_19_i_i_i_fu_696_p2(24 downto 24);
    tmp_4_to_int_fu_322_p1 <= reg_219;
    tmp_5_fu_290_p2 <= (notrhs_fu_284_p2 or notlhs_fu_278_p2);
    tmp_8_to_int_fu_260_p1 <= reg_219;
    tmp_9_fu_274_p1 <= tmp_8_to_int_fu_260_p1(23 - 1 downto 0);
    tmp_fu_264_p4 <= tmp_8_to_int_fu_260_p1(30 downto 23);
    tmp_i_i_i_i_cast8_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_623_p4),9));
    vea <= vea_1_data_reg;
    vea8b <= vea8b_1_data_reg;

    vea8b_1_ack_in_assign_proc : process(vea8b_1_vld_reg)
    begin
        if (((ap_const_logic_0 = vea8b_1_vld_reg) or ((ap_const_logic_1 = vea8b_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            vea8b_1_ack_in <= ap_const_logic_1;
        else 
            vea8b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    vea8b_1_vld_in_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            vea8b_1_vld_in <= ap_const_logic_1;
        else 
            vea8b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    vea_1_ack_in_assign_proc : process(vea_1_vld_reg)
    begin
        if (((ap_const_logic_0 = vea_1_vld_reg) or ((ap_const_logic_1 = vea_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            vea_1_ack_in <= ap_const_logic_1;
        else 
            vea_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    vea_1_vld_in_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            vea_1_vld_in <= ap_const_logic_1;
        else 
            vea_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_fu_604_p3 <= 
        params_vRef_read_reg_797 when (ctrlByp_read_reg_803(0) = '1') else 
        y;
    y_integral_flag_2_phi_fu_168_p4 <= y_integral_flag_2_reg_164;
    y_integral_load_s_fu_241_p3 <= 
        y_integral when (rstIntN_read_reg_808(0) = '1') else 
        ap_const_lv32_0;
    y_integral_new_1_fu_465_p3 <= 
        params_y_min_read_reg_770 when (tmp_23_fu_432_p2(0) = '1') else 
        sel_tmp2_fu_458_p3;
end behav;
