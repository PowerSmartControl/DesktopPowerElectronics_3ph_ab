// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="phase_generator,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.394000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=254,HLS_SYN_LUT=971}" *)

module phase_generator (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        c,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a;
output  [31:0] b;
output  [31:0] c;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_flag00011001;
wire   [31:0] incr_V;
reg   [31:0] acc_V;
wire   [9:0] cos_lut_address0;
reg    cos_lut_ce0;
wire   [31:0] cos_lut_q0;
wire   [9:0] cos_lut_address1;
reg    cos_lut_ce1;
wire   [31:0] cos_lut_q1;
wire   [9:0] cos_lut_address2;
reg    cos_lut_ce2;
wire   [31:0] cos_lut_q2;
wire   [9:0] cos_lut_address3;
reg    cos_lut_ce3;
wire   [31:0] cos_lut_q3;
wire   [9:0] cos_lut_address4;
reg    cos_lut_ce4;
wire   [31:0] cos_lut_q4;
wire   [9:0] cos_lut_address5;
reg    cos_lut_ce5;
wire   [31:0] cos_lut_q5;
reg   [1:0] quad_V_reg_657;
reg   [1:0] ap_reg_pp0_iter1_quad_V_reg_657;
reg   [9:0] lut_addr_V_reg_665;
reg   [1:0] quad_V_1_reg_672;
reg   [1:0] ap_reg_pp0_iter1_quad_V_1_reg_672;
wire   [9:0] lut_addr_V_1_fu_234_p1;
reg   [9:0] lut_addr_V_1_reg_680;
reg   [1:0] quad_V_2_reg_687;
reg   [1:0] ap_reg_pp0_iter1_quad_V_2_reg_687;
wire   [9:0] lut_addr_V_2_fu_254_p1;
reg   [9:0] lut_addr_V_2_reg_695;
wire   [0:0] tmp_1_i_fu_262_p2;
reg   [0:0] tmp_1_i_reg_707;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_i_reg_707;
wire   [0:0] tmp_1_i6_fu_281_p2;
reg   [0:0] tmp_1_i6_reg_723;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_i6_reg_723;
wire   [0:0] tmp_1_i1_fu_300_p2;
reg   [0:0] tmp_1_i1_reg_739;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_i1_reg_739;
wire   [0:0] sel_tmp_i_fu_343_p2;
reg   [0:0] sel_tmp_i_reg_750;
wire   [0:0] sel_tmp6_i_fu_380_p2;
reg   [0:0] sel_tmp6_i_reg_755;
wire   [31:0] sel_tmp11_i_fu_404_p3;
reg   [31:0] sel_tmp11_i_reg_760;
wire   [0:0] sel_tmp_i1_fu_440_p2;
reg   [0:0] sel_tmp_i1_reg_765;
wire   [0:0] sel_tmp6_i1_fu_477_p2;
reg   [0:0] sel_tmp6_i1_reg_770;
wire   [31:0] sel_tmp11_i1_fu_501_p3;
reg   [31:0] sel_tmp11_i1_reg_775;
wire   [0:0] sel_tmp_i2_fu_537_p2;
reg   [0:0] sel_tmp_i2_reg_780;
wire   [0:0] sel_tmp6_i2_fu_574_p2;
reg   [0:0] sel_tmp6_i2_reg_785;
wire   [31:0] sel_tmp11_i2_fu_598_p3;
reg   [31:0] sel_tmp11_i2_reg_790;
reg    ap_block_pp0_stage0_flag00011011;
wire   [31:0] tmp_i_fu_258_p1;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_5_i_fu_272_p1;
wire   [31:0] tmp_i3_fu_277_p1;
wire   [31:0] tmp_5_i1_fu_291_p1;
wire   [31:0] tmp_i1_fu_296_p1;
wire   [31:0] tmp_5_i2_fu_310_p1;
wire   [31:0] p_Val2_1_fu_176_p2;
reg    ap_block_pp0_stage0_flag00001001;
wire   [11:0] full_adr_V_fu_188_p4;
wire   [11:0] p_Val2_3_fu_218_p2;
wire   [11:0] p_Val2_4_fu_238_p2;
wire   [9:0] cos_adr_V_1_fu_267_p2;
wire   [9:0] cos_adr_V_3_fu_286_p2;
wire   [9:0] cos_adr_V_5_fu_305_p2;
wire   [31:0] tmp_3_to_int_i_fu_315_p1;
wire   [31:0] tmp_3_neg_i_fu_319_p2;
wire   [31:0] tmp_6_to_int_i_fu_329_p1;
wire   [31:0] tmp_6_neg_i_fu_333_p2;
wire   [0:0] sel_tmp1_i_fu_348_p2;
wire   [0:0] sel_tmp2_i_fu_353_p2;
wire   [0:0] sel_tmp4_i_fu_367_p2;
wire   [31:0] tmp_3_i_fu_325_p1;
wire   [31:0] sel_tmp3_i_fu_359_p3;
wire   [0:0] sel_tmp8_i_fu_385_p2;
wire   [31:0] tmp_6_i_fu_339_p1;
wire   [31:0] sel_tmp5_i_fu_372_p3;
wire   [0:0] sel_tmp10_i_fu_399_p2;
wire   [31:0] sel_tmp9_i_fu_391_p3;
wire   [31:0] tmp_3_to_int_i7_fu_412_p1;
wire   [31:0] tmp_3_neg_i8_fu_416_p2;
wire   [31:0] tmp_6_to_int_i1_fu_426_p1;
wire   [31:0] tmp_6_neg_i1_fu_430_p2;
wire   [0:0] sel_tmp1_i1_fu_445_p2;
wire   [0:0] sel_tmp2_i1_fu_450_p2;
wire   [0:0] sel_tmp4_i1_fu_464_p2;
wire   [31:0] tmp_3_i9_fu_422_p1;
wire   [31:0] sel_tmp3_i1_fu_456_p3;
wire   [0:0] sel_tmp8_i1_fu_482_p2;
wire   [31:0] tmp_6_i1_fu_436_p1;
wire   [31:0] sel_tmp5_i1_fu_469_p3;
wire   [0:0] sel_tmp10_i1_fu_496_p2;
wire   [31:0] sel_tmp9_i1_fu_488_p3;
wire   [31:0] tmp_3_to_int_i1_fu_509_p1;
wire   [31:0] tmp_3_neg_i1_fu_513_p2;
wire   [31:0] tmp_6_to_int_i2_fu_523_p1;
wire   [31:0] tmp_6_neg_i2_fu_527_p2;
wire   [0:0] sel_tmp1_i2_fu_542_p2;
wire   [0:0] sel_tmp2_i2_fu_547_p2;
wire   [0:0] sel_tmp4_i2_fu_561_p2;
wire   [31:0] tmp_3_i1_fu_519_p1;
wire   [31:0] sel_tmp3_i2_fu_553_p3;
wire   [0:0] sel_tmp8_i2_fu_579_p2;
wire   [31:0] tmp_6_i2_fu_533_p1;
wire   [31:0] sel_tmp5_i2_fu_566_p3;
wire   [0:0] sel_tmp10_i2_fu_593_p2;
wire   [31:0] sel_tmp9_i2_fu_585_p3;
wire   [0:0] sel_tmp16_i_fu_606_p2;
wire   [0:0] tmp_fu_610_p2;
wire   [0:0] sel_tmp16_i1_fu_623_p2;
wire   [0:0] tmp_1_fu_627_p2;
wire   [0:0] sel_tmp16_i2_fu_640_p2;
wire   [0:0] tmp_2_fu_644_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 acc_V = 32'd0;
end

phase_generator_cbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
cos_lut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cos_lut_address0),
    .ce0(cos_lut_ce0),
    .q0(cos_lut_q0),
    .address1(cos_lut_address1),
    .ce1(cos_lut_ce1),
    .q1(cos_lut_q1),
    .address2(cos_lut_address2),
    .ce2(cos_lut_ce2),
    .q2(cos_lut_q2),
    .address3(cos_lut_address3),
    .ce3(cos_lut_ce3),
    .q3(cos_lut_q3),
    .address4(cos_lut_address4),
    .ce4(cos_lut_ce4),
    .q4(cos_lut_q4),
    .address5(cos_lut_address5),
    .ce5(cos_lut_ce5),
    .q5(cos_lut_q5)
);

phase_generator_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
phase_generator_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .incr_V(incr_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        acc_V <= p_Val2_1_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_quad_V_1_reg_672 <= quad_V_1_reg_672;
        ap_reg_pp0_iter1_quad_V_2_reg_687 <= quad_V_2_reg_687;
        ap_reg_pp0_iter1_quad_V_reg_657 <= quad_V_reg_657;
        lut_addr_V_1_reg_680 <= lut_addr_V_1_fu_234_p1;
        lut_addr_V_2_reg_695 <= lut_addr_V_2_fu_254_p1;
        lut_addr_V_reg_665 <= {{p_Val2_1_fu_176_p2[29:20]}};
        quad_V_1_reg_672 <= {{p_Val2_3_fu_218_p2[11:10]}};
        quad_V_2_reg_687 <= {{p_Val2_4_fu_238_p2[11:10]}};
        quad_V_reg_657 <= {{p_Val2_1_fu_176_p2[31:30]}};
        tmp_1_i1_reg_739 <= tmp_1_i1_fu_300_p2;
        tmp_1_i6_reg_723 <= tmp_1_i6_fu_281_p2;
        tmp_1_i_reg_707 <= tmp_1_i_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_tmp_1_i1_reg_739 <= tmp_1_i1_reg_739;
        ap_reg_pp0_iter2_tmp_1_i6_reg_723 <= tmp_1_i6_reg_723;
        ap_reg_pp0_iter2_tmp_1_i_reg_707 <= tmp_1_i_reg_707;
        sel_tmp11_i1_reg_775 <= sel_tmp11_i1_fu_501_p3;
        sel_tmp11_i2_reg_790 <= sel_tmp11_i2_fu_598_p3;
        sel_tmp11_i_reg_760 <= sel_tmp11_i_fu_404_p3;
        sel_tmp6_i1_reg_770 <= sel_tmp6_i1_fu_477_p2;
        sel_tmp6_i2_reg_785 <= sel_tmp6_i2_fu_574_p2;
        sel_tmp6_i_reg_755 <= sel_tmp6_i_fu_380_p2;
        sel_tmp_i1_reg_765 <= sel_tmp_i1_fu_440_p2;
        sel_tmp_i2_reg_780 <= sel_tmp_i2_fu_537_p2;
        sel_tmp_i_reg_750 <= sel_tmp_i_fu_343_p2;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to2))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce0 = 1'b1;
    end else begin
        cos_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce1 = 1'b1;
    end else begin
        cos_lut_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce2 = 1'b1;
    end else begin
        cos_lut_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce3 = 1'b1;
    end else begin
        cos_lut_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce4 = 1'b1;
    end else begin
        cos_lut_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        cos_lut_ce5 = 1'b1;
    end else begin
        cos_lut_ce5 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a = ((tmp_fu_610_p2[0:0] === 1'b1) ? 32'd0 : sel_tmp11_i_reg_760);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b0 == ap_start) & (1'b1 == ap_start));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b0 == ap_start) & (1'b1 == ap_start));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b0 == ap_start) & (1'b1 == ap_start));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (1'b0 == ap_start);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b = ((tmp_1_fu_627_p2[0:0] === 1'b1) ? 32'd0 : sel_tmp11_i1_reg_775);

assign c = ((tmp_2_fu_644_p2[0:0] === 1'b1) ? 32'd0 : sel_tmp11_i2_reg_790);

assign cos_adr_V_1_fu_267_p2 = (10'd0 - lut_addr_V_reg_665);

assign cos_adr_V_3_fu_286_p2 = (10'd0 - lut_addr_V_1_reg_680);

assign cos_adr_V_5_fu_305_p2 = (10'd0 - lut_addr_V_2_reg_695);

assign cos_lut_address0 = tmp_i_fu_258_p1;

assign cos_lut_address1 = tmp_5_i_fu_272_p1;

assign cos_lut_address2 = tmp_i3_fu_277_p1;

assign cos_lut_address3 = tmp_5_i1_fu_291_p1;

assign cos_lut_address4 = tmp_i1_fu_296_p1;

assign cos_lut_address5 = tmp_5_i2_fu_310_p1;

assign full_adr_V_fu_188_p4 = {{p_Val2_1_fu_176_p2[31:20]}};

assign lut_addr_V_1_fu_234_p1 = p_Val2_3_fu_218_p2[9:0];

assign lut_addr_V_2_fu_254_p1 = p_Val2_4_fu_238_p2[9:0];

assign p_Val2_1_fu_176_p2 = (incr_V + acc_V);

assign p_Val2_3_fu_218_p2 = ($signed(12'd2730) + $signed(full_adr_V_fu_188_p4));

assign p_Val2_4_fu_238_p2 = (12'd1365 + full_adr_V_fu_188_p4);

assign sel_tmp10_i1_fu_496_p2 = ((ap_reg_pp0_iter1_quad_V_1_reg_672 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp10_i2_fu_593_p2 = ((ap_reg_pp0_iter1_quad_V_2_reg_687 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp10_i_fu_399_p2 = ((ap_reg_pp0_iter1_quad_V_reg_657 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp11_i1_fu_501_p3 = ((sel_tmp10_i1_fu_496_p2[0:0] === 1'b1) ? cos_lut_q2 : sel_tmp9_i1_fu_488_p3);

assign sel_tmp11_i2_fu_598_p3 = ((sel_tmp10_i2_fu_593_p2[0:0] === 1'b1) ? cos_lut_q4 : sel_tmp9_i2_fu_585_p3);

assign sel_tmp11_i_fu_404_p3 = ((sel_tmp10_i_fu_399_p2[0:0] === 1'b1) ? cos_lut_q0 : sel_tmp9_i_fu_391_p3);

assign sel_tmp16_i1_fu_623_p2 = (sel_tmp_i1_reg_765 | sel_tmp6_i1_reg_770);

assign sel_tmp16_i2_fu_640_p2 = (sel_tmp_i2_reg_780 | sel_tmp6_i2_reg_785);

assign sel_tmp16_i_fu_606_p2 = (sel_tmp_i_reg_750 | sel_tmp6_i_reg_755);

assign sel_tmp1_i1_fu_445_p2 = (tmp_1_i6_reg_723 ^ 1'd1);

assign sel_tmp1_i2_fu_542_p2 = (tmp_1_i1_reg_739 ^ 1'd1);

assign sel_tmp1_i_fu_348_p2 = (tmp_1_i_reg_707 ^ 1'd1);

assign sel_tmp2_i1_fu_450_p2 = (sel_tmp_i1_fu_440_p2 & sel_tmp1_i1_fu_445_p2);

assign sel_tmp2_i2_fu_547_p2 = (sel_tmp_i2_fu_537_p2 & sel_tmp1_i2_fu_542_p2);

assign sel_tmp2_i_fu_353_p2 = (sel_tmp_i_fu_343_p2 & sel_tmp1_i_fu_348_p2);

assign sel_tmp3_i1_fu_456_p3 = ((sel_tmp2_i1_fu_450_p2[0:0] === 1'b1) ? cos_lut_q3 : 32'd0);

assign sel_tmp3_i2_fu_553_p3 = ((sel_tmp2_i2_fu_547_p2[0:0] === 1'b1) ? cos_lut_q5 : 32'd0);

assign sel_tmp3_i_fu_359_p3 = ((sel_tmp2_i_fu_353_p2[0:0] === 1'b1) ? cos_lut_q1 : 32'd0);

assign sel_tmp4_i1_fu_464_p2 = ((ap_reg_pp0_iter1_quad_V_1_reg_672 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_i2_fu_561_p2 = ((ap_reg_pp0_iter1_quad_V_2_reg_687 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_i_fu_367_p2 = ((ap_reg_pp0_iter1_quad_V_reg_657 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp5_i1_fu_469_p3 = ((sel_tmp4_i1_fu_464_p2[0:0] === 1'b1) ? tmp_3_i9_fu_422_p1 : sel_tmp3_i1_fu_456_p3);

assign sel_tmp5_i2_fu_566_p3 = ((sel_tmp4_i2_fu_561_p2[0:0] === 1'b1) ? tmp_3_i1_fu_519_p1 : sel_tmp3_i2_fu_553_p3);

assign sel_tmp5_i_fu_372_p3 = ((sel_tmp4_i_fu_367_p2[0:0] === 1'b1) ? tmp_3_i_fu_325_p1 : sel_tmp3_i_fu_359_p3);

assign sel_tmp6_i1_fu_477_p2 = ((ap_reg_pp0_iter1_quad_V_1_reg_672 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_i2_fu_574_p2 = ((ap_reg_pp0_iter1_quad_V_2_reg_687 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_i_fu_380_p2 = ((ap_reg_pp0_iter1_quad_V_reg_657 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp8_i1_fu_482_p2 = (sel_tmp6_i1_fu_477_p2 & sel_tmp1_i1_fu_445_p2);

assign sel_tmp8_i2_fu_579_p2 = (sel_tmp6_i2_fu_574_p2 & sel_tmp1_i2_fu_542_p2);

assign sel_tmp8_i_fu_385_p2 = (sel_tmp6_i_fu_380_p2 & sel_tmp1_i_fu_348_p2);

assign sel_tmp9_i1_fu_488_p3 = ((sel_tmp8_i1_fu_482_p2[0:0] === 1'b1) ? tmp_6_i1_fu_436_p1 : sel_tmp5_i1_fu_469_p3);

assign sel_tmp9_i2_fu_585_p3 = ((sel_tmp8_i2_fu_579_p2[0:0] === 1'b1) ? tmp_6_i2_fu_533_p1 : sel_tmp5_i2_fu_566_p3);

assign sel_tmp9_i_fu_391_p3 = ((sel_tmp8_i_fu_385_p2[0:0] === 1'b1) ? tmp_6_i_fu_339_p1 : sel_tmp5_i_fu_372_p3);

assign sel_tmp_i1_fu_440_p2 = ((ap_reg_pp0_iter1_quad_V_1_reg_672 == 2'd3) ? 1'b1 : 1'b0);

assign sel_tmp_i2_fu_537_p2 = ((ap_reg_pp0_iter1_quad_V_2_reg_687 == 2'd3) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_343_p2 = ((ap_reg_pp0_iter1_quad_V_reg_657 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_1_fu_627_p2 = (sel_tmp16_i1_fu_623_p2 & ap_reg_pp0_iter2_tmp_1_i6_reg_723);

assign tmp_1_i1_fu_300_p2 = ((lut_addr_V_2_reg_695 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_1_i6_fu_281_p2 = ((lut_addr_V_1_reg_680 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_262_p2 = ((lut_addr_V_reg_665 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_644_p2 = (sel_tmp16_i2_fu_640_p2 & ap_reg_pp0_iter2_tmp_1_i1_reg_739);

assign tmp_3_i1_fu_519_p1 = tmp_3_neg_i1_fu_513_p2;

assign tmp_3_i9_fu_422_p1 = tmp_3_neg_i8_fu_416_p2;

assign tmp_3_i_fu_325_p1 = tmp_3_neg_i_fu_319_p2;

assign tmp_3_neg_i1_fu_513_p2 = (tmp_3_to_int_i1_fu_509_p1 ^ 32'd2147483648);

assign tmp_3_neg_i8_fu_416_p2 = (tmp_3_to_int_i7_fu_412_p1 ^ 32'd2147483648);

assign tmp_3_neg_i_fu_319_p2 = (tmp_3_to_int_i_fu_315_p1 ^ 32'd2147483648);

assign tmp_3_to_int_i1_fu_509_p1 = cos_lut_q4;

assign tmp_3_to_int_i7_fu_412_p1 = cos_lut_q2;

assign tmp_3_to_int_i_fu_315_p1 = cos_lut_q0;

assign tmp_5_i1_fu_291_p1 = cos_adr_V_3_fu_286_p2;

assign tmp_5_i2_fu_310_p1 = cos_adr_V_5_fu_305_p2;

assign tmp_5_i_fu_272_p1 = cos_adr_V_1_fu_267_p2;

assign tmp_6_i1_fu_436_p1 = tmp_6_neg_i1_fu_430_p2;

assign tmp_6_i2_fu_533_p1 = tmp_6_neg_i2_fu_527_p2;

assign tmp_6_i_fu_339_p1 = tmp_6_neg_i_fu_333_p2;

assign tmp_6_neg_i1_fu_430_p2 = (tmp_6_to_int_i1_fu_426_p1 ^ 32'd2147483648);

assign tmp_6_neg_i2_fu_527_p2 = (tmp_6_to_int_i2_fu_523_p1 ^ 32'd2147483648);

assign tmp_6_neg_i_fu_333_p2 = (tmp_6_to_int_i_fu_329_p1 ^ 32'd2147483648);

assign tmp_6_to_int_i1_fu_426_p1 = cos_lut_q3;

assign tmp_6_to_int_i2_fu_523_p1 = cos_lut_q5;

assign tmp_6_to_int_i_fu_329_p1 = cos_lut_q1;

assign tmp_fu_610_p2 = (sel_tmp16_i_fu_606_p2 & ap_reg_pp0_iter2_tmp_1_i_reg_707);

assign tmp_i1_fu_296_p1 = lut_addr_V_2_reg_695;

assign tmp_i3_fu_277_p1 = lut_addr_V_1_reg_680;

assign tmp_i_fu_258_p1 = lut_addr_V_reg_665;

endmodule //phase_generator
