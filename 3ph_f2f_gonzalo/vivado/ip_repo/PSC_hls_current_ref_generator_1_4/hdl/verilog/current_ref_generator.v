// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="current_ref_generator,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.501500,HLS_SYN_LAT=76,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=3282,HLS_SYN_LUT=4853}" *)

module current_ref_generator (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vea,
        va,
        vb,
        vc,
        i_alfa_ref,
        i_beta_ref,
        alfa_ref8b,
        beta_ref8b
);

parameter    ap_ST_fsm_state1 = 77'd1;
parameter    ap_ST_fsm_state2 = 77'd2;
parameter    ap_ST_fsm_state3 = 77'd4;
parameter    ap_ST_fsm_state4 = 77'd8;
parameter    ap_ST_fsm_state5 = 77'd16;
parameter    ap_ST_fsm_state6 = 77'd32;
parameter    ap_ST_fsm_state7 = 77'd64;
parameter    ap_ST_fsm_state8 = 77'd128;
parameter    ap_ST_fsm_state9 = 77'd256;
parameter    ap_ST_fsm_state10 = 77'd512;
parameter    ap_ST_fsm_state11 = 77'd1024;
parameter    ap_ST_fsm_state12 = 77'd2048;
parameter    ap_ST_fsm_state13 = 77'd4096;
parameter    ap_ST_fsm_state14 = 77'd8192;
parameter    ap_ST_fsm_state15 = 77'd16384;
parameter    ap_ST_fsm_state16 = 77'd32768;
parameter    ap_ST_fsm_state17 = 77'd65536;
parameter    ap_ST_fsm_state18 = 77'd131072;
parameter    ap_ST_fsm_state19 = 77'd262144;
parameter    ap_ST_fsm_state20 = 77'd524288;
parameter    ap_ST_fsm_state21 = 77'd1048576;
parameter    ap_ST_fsm_state22 = 77'd2097152;
parameter    ap_ST_fsm_state23 = 77'd4194304;
parameter    ap_ST_fsm_state24 = 77'd8388608;
parameter    ap_ST_fsm_state25 = 77'd16777216;
parameter    ap_ST_fsm_state26 = 77'd33554432;
parameter    ap_ST_fsm_state27 = 77'd67108864;
parameter    ap_ST_fsm_state28 = 77'd134217728;
parameter    ap_ST_fsm_state29 = 77'd268435456;
parameter    ap_ST_fsm_state30 = 77'd536870912;
parameter    ap_ST_fsm_state31 = 77'd1073741824;
parameter    ap_ST_fsm_state32 = 77'd2147483648;
parameter    ap_ST_fsm_state33 = 77'd4294967296;
parameter    ap_ST_fsm_state34 = 77'd8589934592;
parameter    ap_ST_fsm_state35 = 77'd17179869184;
parameter    ap_ST_fsm_state36 = 77'd34359738368;
parameter    ap_ST_fsm_state37 = 77'd68719476736;
parameter    ap_ST_fsm_state38 = 77'd137438953472;
parameter    ap_ST_fsm_state39 = 77'd274877906944;
parameter    ap_ST_fsm_state40 = 77'd549755813888;
parameter    ap_ST_fsm_state41 = 77'd1099511627776;
parameter    ap_ST_fsm_state42 = 77'd2199023255552;
parameter    ap_ST_fsm_state43 = 77'd4398046511104;
parameter    ap_ST_fsm_state44 = 77'd8796093022208;
parameter    ap_ST_fsm_state45 = 77'd17592186044416;
parameter    ap_ST_fsm_state46 = 77'd35184372088832;
parameter    ap_ST_fsm_state47 = 77'd70368744177664;
parameter    ap_ST_fsm_state48 = 77'd140737488355328;
parameter    ap_ST_fsm_state49 = 77'd281474976710656;
parameter    ap_ST_fsm_state50 = 77'd562949953421312;
parameter    ap_ST_fsm_state51 = 77'd1125899906842624;
parameter    ap_ST_fsm_state52 = 77'd2251799813685248;
parameter    ap_ST_fsm_state53 = 77'd4503599627370496;
parameter    ap_ST_fsm_state54 = 77'd9007199254740992;
parameter    ap_ST_fsm_state55 = 77'd18014398509481984;
parameter    ap_ST_fsm_state56 = 77'd36028797018963968;
parameter    ap_ST_fsm_state57 = 77'd72057594037927936;
parameter    ap_ST_fsm_state58 = 77'd144115188075855872;
parameter    ap_ST_fsm_state59 = 77'd288230376151711744;
parameter    ap_ST_fsm_state60 = 77'd576460752303423488;
parameter    ap_ST_fsm_state61 = 77'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 77'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 77'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 77'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 77'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 77'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 77'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 77'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 77'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 77'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 77'd75557863725914323419136;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] vea;
input  [11:0] va;
input  [11:0] vb;
input  [11:0] vc;
output  [31:0] i_alfa_ref;
output  [31:0] i_beta_ref;
output  [7:0] alfa_ref8b;
output  [7:0] beta_ref8b;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_alfa_ref_1_data_reg;
reg    i_alfa_ref_1_vld_reg;
reg    i_alfa_ref_1_vld_in;
reg    i_alfa_ref_1_ack_in;
reg   [31:0] i_beta_ref_1_data_reg;
reg    i_beta_ref_1_vld_reg;
reg    i_beta_ref_1_vld_in;
reg    i_beta_ref_1_ack_in;
reg   [7:0] alfa_ref8b_1_data_reg;
reg    alfa_ref8b_1_vld_reg;
reg    alfa_ref8b_1_vld_in;
reg    alfa_ref8b_1_ack_in;
reg   [7:0] beta_ref8b_1_data_reg;
reg    beta_ref8b_1_vld_reg;
reg    beta_ref8b_1_vld_in;
reg    beta_ref8b_1_ack_in;
wire   [31:0] grp_fu_177_p1;
reg   [31:0] reg_180;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] reg_186;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state70;
reg   [31:0] reg_198;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] reg_205;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] reg_213;
reg   [31:0] reg_222;
wire   [31:0] tmp_i_fu_228_p1;
wire   [31:0] tmp_i1_fu_233_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_i6_fu_238_p1;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] tmp_3_reg_401;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] v_A_Bn_reg_406;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_173_p2;
reg   [31:0] v_A_Bn_1_reg_411;
wire    ap_CS_fsm_state63;
reg   [0:0] p_Result_s_reg_422;
wire    ap_CS_fsm_state74;
wire   [22:0] loc_V_1_fu_265_p1;
reg   [22:0] loc_V_1_reg_427;
wire   [8:0] sh_assign_fu_273_p2;
reg   [8:0] sh_assign_reg_432;
reg   [0:0] isNeg_reg_437;
wire   [7:0] tmp_6_i_i_i_fu_287_p2;
reg   [7:0] tmp_6_i_i_i_reg_443;
wire   [6:0] p_Val2_2_fu_361_p3;
reg   [6:0] p_Val2_2_reg_448;
wire    ap_CS_fsm_state75;
wire   [7:0] p_Val2_4_fu_377_p3;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state71;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state42;
reg   [31:0] grp_fu_149_p0;
reg   [31:0] grp_fu_149_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state67;
reg   [31:0] grp_fu_155_p0;
reg   [31:0] grp_fu_155_p1;
wire    ap_CS_fsm_state47;
reg   [31:0] grp_fu_177_p0;
wire   [31:0] p_Val2_s_fu_243_p1;
wire   [7:0] loc_V_fu_255_p4;
wire   [8:0] tmp_i_i_i_i_cast1_fu_269_p1;
wire   [24:0] tmp_4_i_i_i_fu_293_p4;
wire  signed [8:0] tmp_6_i_i_i_cast_fu_306_p1;
wire   [8:0] sh_assign_1_fu_309_p3;
wire  signed [31:0] sh_assign_1_cast_fu_315_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_319_p1;
wire   [54:0] tmp_4_i_i_i_cast2_fu_302_p1;
wire   [54:0] tmp_8_i_i_i_fu_323_p1;
wire   [24:0] tmp_9_i_i_i_fu_327_p2;
wire   [0:0] tmp_10_fu_339_p3;
wire   [54:0] tmp_1_i_i_i_fu_333_p2;
wire   [6:0] tmp_fu_347_p1;
wire   [6:0] tmp_6_fu_351_p4;
wire   [7:0] tmp_i_i_i_fu_368_p1;
wire   [7:0] tmp_10_i_i_i_fu_371_p2;
reg   [1:0] grp_fu_140_opcode;
wire    ap_CS_fsm_state77;
reg    ap_block_state77;
reg   [76:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 77'd1;
#0 i_alfa_ref_1_data_reg = 32'd0;
#0 i_alfa_ref_1_vld_reg = 1'b0;
#0 i_beta_ref_1_data_reg = 32'd0;
#0 i_beta_ref_1_vld_reg = 1'b0;
#0 alfa_ref8b_1_data_reg = 8'd0;
#0 alfa_ref8b_1_vld_reg = 1'b0;
#0 beta_ref8b_1_data_reg = 8'd0;
#0 beta_ref8b_1_vld_reg = 1'b0;
end

current_ref_generbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_generbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .opcode(grp_fu_140_opcode),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

current_ref_genercud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_genercud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_186),
    .din1(reg_198),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

current_ref_generdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_generdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_149_p0),
    .din1(grp_fu_149_p1),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

current_ref_generdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_generdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

current_ref_genereOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_genereOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_186),
    .din1(reg_205),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

current_ref_genereOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_genereOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_213),
    .din1(reg_205),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

current_ref_generfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
current_ref_generfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_177_p0),
    .ce(1'b1),
    .dout(grp_fu_177_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == alfa_ref8b_1_vld_in) & (1'b0 == alfa_ref8b_1_vld_reg)) | (~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == alfa_ref8b_1_vld_in) & (1'b1 == alfa_ref8b_1_vld_reg) & (1'b1 == 1'b1)))) begin
        alfa_ref8b_1_data_reg <= p_Val2_4_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == beta_ref8b_1_vld_in) & (1'b0 == beta_ref8b_1_vld_reg)) | (~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == beta_ref8b_1_vld_in) & (1'b1 == beta_ref8b_1_vld_reg) & (1'b1 == 1'b1)))) begin
        beta_ref8b_1_data_reg <= p_Val2_4_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == i_alfa_ref_1_vld_in) & (1'b0 == i_alfa_ref_1_vld_reg)) | (~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == i_alfa_ref_1_vld_in) & (1'b1 == i_alfa_ref_1_vld_reg) & (1'b1 == 1'b1)))) begin
        i_alfa_ref_1_data_reg <= reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == i_beta_ref_1_vld_in) & (1'b0 == i_beta_ref_1_vld_reg)) | (~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == i_beta_ref_1_vld_in) & (1'b1 == i_beta_ref_1_vld_reg) & (1'b1 == 1'b1)))) begin
        i_beta_ref_1_data_reg <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        isNeg_reg_437 <= sh_assign_fu_273_p2[32'd8];
        loc_V_1_reg_427 <= loc_V_1_fu_265_p1;
        p_Result_s_reg_422 <= p_Val2_s_fu_243_p1[32'd31];
        sh_assign_reg_432 <= sh_assign_fu_273_p2;
        tmp_6_i_i_i_reg_443 <= tmp_6_i_i_i_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        p_Val2_2_reg_448 <= p_Val2_2_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_180 <= grp_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_186 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_198 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_205 <= grp_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_213 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_222 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_3_reg_401 <= grp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        v_A_Bn_1_reg_411 <= grp_fu_173_p2;
        v_A_Bn_reg_406 <= grp_fu_169_p2;
    end
end

always @ (*) begin
    if (((1'b0 == alfa_ref8b_1_vld_reg) | ((1'b1 == alfa_ref8b_1_vld_reg) & (1'b1 == 1'b1)))) begin
        alfa_ref8b_1_ack_in = 1'b1;
    end else begin
        alfa_ref8b_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        alfa_ref8b_1_vld_in = 1'b1;
    end else begin
        alfa_ref8b_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & ~((1'b0 == i_alfa_ref_1_ack_in) | (1'b0 == i_beta_ref_1_ack_in) | (1'b0 == alfa_ref8b_1_ack_in) | (1'b0 == beta_ref8b_1_ack_in)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & ~((1'b0 == i_alfa_ref_1_ack_in) | (1'b0 == i_beta_ref_1_ack_in) | (1'b0 == alfa_ref8b_1_ack_in) | (1'b0 == beta_ref8b_1_ack_in)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == beta_ref8b_1_vld_reg) | ((1'b1 == beta_ref8b_1_vld_reg) & (1'b1 == 1'b1)))) begin
        beta_ref8b_1_ack_in = 1'b1;
    end else begin
        beta_ref8b_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        beta_ref8b_1_vld_in = 1'b1;
    end else begin
        beta_ref8b_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_140_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_140_opcode = 2'd0;
    end else begin
        grp_fu_140_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_140_p0 = reg_205;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_140_p0 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_140_p0 = reg_213;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_140_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_140_p0 = reg_186;
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_140_p1 = reg_222;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_140_p1 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_140_p1 = reg_186;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_140_p1 = 32'd3223322624;
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_149_p0 = v_A_Bn_reg_406;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_fu_149_p0 = reg_186;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_149_p0 = reg_205;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_149_p0 = reg_180;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_149_p1 = 32'd1115684864;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_149_p1 = 32'd1059760811;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_149_p1 = vea;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_149_p1 = reg_186;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_149_p1 = 32'd1051372203;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_149_p1 = 32'd1086324736;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_149_p1 = 32'd983564288;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_155_p0 = v_A_Bn_1_reg_411;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_fu_155_p0 = reg_213;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_155_p0 = tmp_3_reg_401;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_155_p0 = reg_186;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_155_p0 = reg_180;
    end else begin
        grp_fu_155_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_155_p1 = 32'd1059760811;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_155_p1 = vea;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_155_p1 = reg_213;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_155_p1 = 32'd1058262330;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_155_p1 = 32'd1073741824;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_155_p1 = 32'd983564288;
    end else begin
        grp_fu_155_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_177_p0 = tmp_i6_fu_238_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_177_p0 = tmp_i1_fu_233_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_177_p0 = tmp_i_fu_228_p1;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == i_alfa_ref_1_vld_reg) | ((1'b1 == i_alfa_ref_1_vld_reg) & (1'b1 == 1'b1)))) begin
        i_alfa_ref_1_ack_in = 1'b1;
    end else begin
        i_alfa_ref_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i_alfa_ref_1_vld_in = 1'b1;
    end else begin
        i_alfa_ref_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == i_beta_ref_1_vld_reg) | ((1'b1 == i_beta_ref_1_vld_reg) & (1'b1 == 1'b1)))) begin
        i_beta_ref_1_ack_in = 1'b1;
    end else begin
        i_beta_ref_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_beta_ref_1_vld_in = 1'b1;
    end else begin
        i_beta_ref_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & ~((1'b0 == i_alfa_ref_1_ack_in) | (1'b0 == i_beta_ref_1_ack_in) | (1'b0 == alfa_ref8b_1_ack_in) | (1'b0 == beta_ref8b_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alfa_ref8b = alfa_ref8b_1_data_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

always @ (*) begin
    ap_block_state77 = ((1'b0 == i_alfa_ref_1_ack_in) | (1'b0 == i_beta_ref_1_ack_in) | (1'b0 == alfa_ref8b_1_ack_in) | (1'b0 == beta_ref8b_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_ref8b = beta_ref8b_1_data_reg;

assign i_alfa_ref = i_alfa_ref_1_data_reg;

assign i_beta_ref = i_beta_ref_1_data_reg;

assign loc_V_1_fu_265_p1 = p_Val2_s_fu_243_p1[22:0];

assign loc_V_fu_255_p4 = {{p_Val2_s_fu_243_p1[30:23]}};

assign p_Val2_2_fu_361_p3 = ((isNeg_reg_437[0:0] === 1'b1) ? tmp_fu_347_p1 : tmp_6_fu_351_p4);

assign p_Val2_4_fu_377_p3 = ((p_Result_s_reg_422[0:0] === 1'b1) ? tmp_10_i_i_i_fu_371_p2 : tmp_i_i_i_fu_368_p1);

assign p_Val2_s_fu_243_p1 = grp_fu_149_p2;

assign sh_assign_1_cast_cas_fu_319_p1 = $signed(sh_assign_1_fu_309_p3);

assign sh_assign_1_cast_fu_315_p1 = $signed(sh_assign_1_fu_309_p3);

assign sh_assign_1_fu_309_p3 = ((isNeg_reg_437[0:0] === 1'b1) ? tmp_6_i_i_i_cast_fu_306_p1 : sh_assign_reg_432);

assign sh_assign_fu_273_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast1_fu_269_p1));

assign tmp_10_fu_339_p3 = tmp_9_i_i_i_fu_327_p2[32'd24];

assign tmp_10_i_i_i_fu_371_p2 = (8'd0 - tmp_i_i_i_fu_368_p1);

assign tmp_1_i_i_i_fu_333_p2 = tmp_4_i_i_i_cast2_fu_302_p1 << tmp_8_i_i_i_fu_323_p1;

assign tmp_4_i_i_i_cast2_fu_302_p1 = tmp_4_i_i_i_fu_293_p4;

assign tmp_4_i_i_i_fu_293_p4 = {{{{1'd1}, {loc_V_1_reg_427}}}, {1'd0}};

assign tmp_6_fu_351_p4 = {{tmp_1_i_i_i_fu_333_p2[30:24]}};

assign tmp_6_i_i_i_cast_fu_306_p1 = $signed(tmp_6_i_i_i_reg_443);

assign tmp_6_i_i_i_fu_287_p2 = (8'd127 - loc_V_fu_255_p4);

assign tmp_8_i_i_i_fu_323_p1 = $unsigned(sh_assign_1_cast_fu_315_p1);

assign tmp_9_i_i_i_fu_327_p2 = tmp_4_i_i_i_fu_293_p4 >> sh_assign_1_cast_cas_fu_319_p1;

assign tmp_fu_347_p1 = tmp_10_fu_339_p3;

assign tmp_i1_fu_233_p1 = vb;

assign tmp_i6_fu_238_p1 = vc;

assign tmp_i_fu_228_p1 = va;

assign tmp_i_i_i_fu_368_p1 = p_Val2_2_reg_448;

assign tmp_i_i_i_i_cast1_fu_269_p1 = loc_V_fu_255_p4;

endmodule //current_ref_generator
